{
    "adjustor": {
        "activate": {
            "Name": "activate()",
            "Description": "     Start the adjustor at full power (works only when run inside a cockpit or under remote control)",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Stops the adjustor (works only when run inside a cockpit or under remote control)",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the adjustor is active",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the adjustor",
            "Parameters": "",
            "Returns": ""
        },
        "setThrust": {
            "Name": "setThrust(thrust)",
            "Description": "     Set the exhaust thrust of the adjustor",
            "Parameters": "<tr><td> thrust </td><td>number</td><td> The adjustor thrust in newtons (limited by the maximum thrust)</td></tr>",
            "Returns": ""
        },
        "getThrust": {
            "Name": "getThrust()",
            "Description": "     Returns the current exhaust thrust of the adjustor",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxThrust": {
            "Name": "getMaxThrust()",
            "Description": "     Returns the maximal exhaust thrust the adjustor can deliver",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getThrustAxis": {
            "Name": "getThrustAxis()",
            "Description": "     Returns the adjustor exhaust thrust direction in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getTorqueAxis": {
            "Name": "getTorqueAxis()",
            "Description": "     Returns the adjustor torque axis in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldThrustAxis": {
            "Name": "getWorldThrustAxis()",
            "Description": "     Returns the adjustor exhaust thrust direction in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldTorqueAxis": {
            "Name": "getWorldTorqueAxis()",
            "Description": "     Returns the adjustor torque axis in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        }
    },
    "airfoil": {
        "getLift": {
            "Name": "getLift()",
            "Description": "     Returns the current lift of the airfoil",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxLift": {
            "Name": "getMaxLift()",
            "Description": "     Gives the maximum lift that the airfoil can generate, under optimal conditions.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getDrag": {
            "Name": "getDrag()",
            "Description": "     Returns the current drag of the airfoil",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getDragRatio": {
            "Name": "getDragRatio()",
            "Description": "     The ratio between lift and drag, depending of the aerodynamic profile of the airfoil",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCurrentMinLift": {
            "Name": "getCurrentMinLift()",
            "Description": "     Returns the minimal lift the airfoil can deliver at the moment (can be higher than zero),",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCurrentMaxLift": {
            "Name": "getCurrentMaxLift()",
            "Description": "     Returns the maximal lift the aifoil can deliver at the moment, which might depend on",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxLiftEfficiency": {
            "Name": "getMaxLiftEfficiency()",
            "Description": "     Returns the ratio between the current maximum lift and the optimal maximum lift",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getLiftAxis": {
            "Name": "getLiftAxis()",
            "Description": "     Returns the airfoil lift direction in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getTorqueAxis": {
            "Name": "getTorqueAxis()",
            "Description": "     Returns the airfoil torque axis in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldLiftAxis": {
            "Name": "getWorldLiftAxis()",
            "Description": "     Returns the airfoil lift direction in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldTorqueAxis": {
            "Name": "getWorldTorqueAxis()",
            "Description": "     Returns the adjustor torque axis in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "isStalled": {
            "Name": "isStalled()",
            "Description": "     Checks if the airfoil is stalled",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getStallAngle": {
            "Name": "getStallAngle()",
            "Description": "     Returns the airfoil stall angle",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMinAngle": {
            "Name": "getMinAngle()",
            "Description": "     Returns the minimum angle to produce the maximum lift of the airfoil",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxAngle": {
            "Name": "getMaxAngle()",
            "Description": "     Returns the maximum angle to produce the maximum lift of the airfoil",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        }
    },
    "antigravitygenerator": {
        "activate": {
            "Name": "activate()",
            "Description": "     Activate the anti-gravity generator",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "      Deactivate the anti-gravity generator",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Returns the state of activation of the anti-gravity generator",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the anti-gravity generator",
            "Parameters": "",
            "Returns": ""
        },
        "getFieldStrength": {
            "Name": "getFieldStrength()",
            "Description": "     Returns the strength of the anti-gravitational field",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCompensationRate": {
            "Name": "getCompensationRate()",
            "Description": "     Returns the current rate of compensation of the gravitational field",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getFieldPower": {
            "Name": "getFieldPower()",
            "Description": "     Returns the current power of the gravitational field",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getPulsorCount": {
            "Name": "getPulsorCount()",
            "Description": "     Returns the number of pulsors linked to the anti-gravity generator",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setTargetAltitude": {
            "Name": "setTargetAltitude(altitude)",
            "Description": "     Set the target altitude for the anti-gravity field. Cannot be called from onFlush",
            "Parameters": "<tr><td> altitude </td><td>number</td><td> The target altitude in meters. It will be reached with a slow acceleration (not instantaneous)</td></tr>",
            "Returns": ""
        },
        "getTargetAltitude": {
            "Name": "getTargetAltitude()",
            "Description": "     Returns the target altitude defined for the anti-gravitational field",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getBaseAltitude": {
            "Name": "getBaseAltitude()",
            "Description": "     Returns the current base altitude of the anti-gravitational field",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        }
    },
    "baseshieldgenerator": {
        "onToggled": {
            "Name": "onToggled",
            "Description": "     Emitted when we started or stopped the shield generator",
            "Parameters": "<tr><td> active </td><td>integer</td><td> 1 if the element was activated, 0 otherwise</td></tr>",
            "Returns": ""
        },
        "onAbsorbed": {
            "Name": "onAbsorbed",
            "Description": "     Emitted when the shield absorbed incoming damage",
            "Parameters": "<tr><td> hitpoints </td><td>number</td><td> Damage the shield absorbed</td></tr><tr><td> rawHitpoints </td><td>number</td><td> Total damage without taking resistances into account</td></tr>",
            "Returns": ""
        },
        "onDown": {
            "Name": "onDown",
            "Description": "     Emitted when the shield hit points reached 0 due to damage",
            "Parameters": "",
            "Returns": ""
        },
        "onRestored": {
            "Name": "onRestored",
            "Description": "     Emitted when the shield hit points were fully restored",
            "Parameters": "",
            "Returns": ""
        },
        "onEnterLockdown": {
            "Name": "onEnterLockdown",
            "Description": "     Emitted when the shield enters lockdown",
            "Parameters": "",
            "Returns": ""
        },
        "onLeaveLockdown": {
            "Name": "onLeaveLockdown",
            "Description": "     Emitted when the shield exits the lockdown",
            "Parameters": "",
            "Returns": ""
        },
        "activate": {
            "Name": "activate()",
            "Description": "     Activate the shield",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Deactivate the shield",
            "Parameters": "",
            "Returns": ""
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the shield",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Returns the activation state of the shield",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getShieldHitpoints": {
            "Name": "getShieldHitpoints()",
            "Description": "     Returns the current hit points of the shield",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxShieldHitpoints": {
            "Name": "getMaxShieldHitpoints()",
            "Description": "     Returns the maximal hit points of the shield",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistances": {
            "Name": "getResistances()",
            "Description": "     Returns distribution of resistance pool over resistance types",
            "Parameters": "",
            "Returns": "<tr><td> resistances</td><td>table</td><td> Resistance to damage type {antimatter, electromagnetic, kinetic, thermic}</td></tr>"
        },
        "setResistances": {
            "Name": "setResistances(antimatter,electromagnetic,kinetic,thermic)",
            "Description": "     Distribute the resistance pool according to damage type",
            "Parameters": "<tr><td> antimatter </td><td>number</td><td> Antimatter damage resistance</td></tr><tr><td> electromagnetic </td><td>number</td><td> Electromagnetic damage resistance</td></tr><tr><td> kinetic </td><td>number</td><td> Kinetic damage resistance</td></tr><tr><td> thermic </td><td>number</td><td> Thermic damage resistance</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getResistancesCooldown": {
            "Name": "getResistancesCooldown()",
            "Description": "     Returns time after which adjusting resistances is possible again",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistancesMaxCooldown": {
            "Name": "getResistancesMaxCooldown()",
            "Description": "     Returns maximal cooldown between adjusting resistances",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistancesPool": {
            "Name": "getResistancesPool()",
            "Description": "     Returns total resistance pool that may be distributed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistancesRemaining": {
            "Name": "getResistancesRemaining()",
            "Description": "     Returns the remaining amount of the resistance pool that can be distributed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getStressRatio": {
            "Name": "getStressRatio()",
            "Description": "     Returns ratio per damage type of recent weapon impacts after applying resistance",
            "Parameters": "",
            "Returns": "<tr><td> stress</td><td>table</td><td> Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}</td></tr>"
        },
        "getStressRatioRaw": {
            "Name": "getStressRatioRaw()",
            "Description": "     Returns ratio per damage type of recent weapon impacts without resistance",
            "Parameters": "",
            "Returns": "<tr><td> stress</td><td>table</td><td> Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}</td></tr>"
        },
        "getStressHitpoints": {
            "Name": "getStressHitpoints()",
            "Description": "     Returns stress, that is the total hit points of recent weapon impacts after applying resistance",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getStressHitpointsRaw": {
            "Name": "getStressHitpointsRaw()",
            "Description": "     Returns stress, that is the total hit points of recent weapon impacts without resistance",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "inLockdown": {
            "Name": "inLockdown()",
            "Description": "     Returns whether the base shield is currently in lockdown",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getLockdownRemaining": {
            "Name": "getLockdownRemaining()",
            "Description": "     Returns the remaining time of the base shield lockdown",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getLockdownExitTime": {
            "Name": "getLockdownExitTime()",
            "Description": "     Returns the hour since midnight of the preferred lockdown exit",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setLockdownExitTime": {
            "Name": "setLockdownExitTime(hour)",
            "Description": "     Set hour since midnight for the preferred lockdown exit",
            "Parameters": "<tr><td> hour </td><td>integer</td><td> Preferred lockdown exit hour UTC</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "brakeengine": {
        "activate": {
            "Name": "activate()",
            "Description": "     Start the brake at full power (works only when run inside a cockpit or under remote control)",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Stops the brake (works only when run inside a cockpit or under remote control)",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the brake is active",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the brake",
            "Parameters": "",
            "Returns": ""
        },
        "setThrust": {
            "Name": "setThrust(thrust)",
            "Description": "     Set the thrust of the brake. Note that brakes can generate a force only in the movement opposite direction",
            "Parameters": "<tr><td> thrust </td><td>number</td><td> The brake thrust in newtons (limited by the maximum thrust)</td></tr>",
            "Returns": ""
        },
        "getThrust": {
            "Name": "getThrust()",
            "Description": "     Returns the current thrust of the brake",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxThrust": {
            "Name": "getMaxThrust()",
            "Description": "     Returns the maximal thrust the brake can deliver in principle, under optimal conditions.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCurrentMinThrust": {
            "Name": "getCurrentMinThrust()",
            "Description": "     Returns the minimal thrust the brake can deliver at the moment (can be more than zero),",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCurrentMaxThrust": {
            "Name": "getCurrentMaxThrust()",
            "Description": "     Returns the maximal thrust the brake can deliver at the moment, which might depend on",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxThrustEfficiency": {
            "Name": "getMaxThrustEfficiency()",
            "Description": "     Returns the ratio between the current maximum thrust and the optimal maximum thrust",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getThrustAxis": {
            "Name": "getThrustAxis()",
            "Description": "     Returns the brake thrust direction in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldThrustAxis": {
            "Name": "getWorldThrustAxis()",
            "Description": "     Returns the brake thrust direction in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        }
    },
    "construct": {
        "getName": {
            "Name": "getName()",
            "Description": "     Returns the name of the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getId": {
            "Name": "getId()",
            "Description": "     Returns the construct unique ID",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getOwner": {
            "Name": "getOwner()",
            "Description": "     Returns the owner entity",
            "Parameters": "",
            "Returns": "<tr><td> entity</td><td>table</td><td> The owner entity table with fields {[int] id, [bool] isOrganization} describing the owner. Use system.getPlayerName(id) and system.getOrganization(id) to retrieve info about it</td></tr>"
        },
        "getCreator": {
            "Name": "getCreator()",
            "Description": "     Returns the creator entity",
            "Parameters": "",
            "Returns": "<tr><td> entity</td><td>integer</td><td> The owner entity table with fields {[int] id, [bool] isOrganization} describing the owner. Use system.getPlayerName(id) and system.getOrganization(id) to retrieve info about it</td></tr>"
        },
        "isWarping": {
            "Name": "isWarping()",
            "Description": "     Checks if the construct is currently warping",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getWarpState": {
            "Name": "getWarpState()",
            "Description": "     Returns the current warp state",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> The current warp state index (Idle = 1, Engage = 2, Align = 3, Spool = 4, Accelerate = 5, Cruise = 6, Decelerate = 7, Stopping = 8, Disengage = 9)</td></tr>"
        },
        "isInPvPZone": {
            "Name": "isInPvPZone()",
            "Description": "     Checks if the construct is in PvP zone",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getDistanceToSafeZone": {
            "Name": "getDistanceToSafeZone()",
            "Description": "     Returns the distance between the construct and the nearest safe zone",
            "Parameters": "",
            "Returns": "<tr><td> distance</td><td>number</td><td> The distance to the nearest safe zone border in meters. Positive value if the construct is outside of any safe zone</td></tr>"
        },
        "getPvPTimer": {
            "Name": "getPvPTimer()",
            "Description": "     Returns the current construct PvP timer state",
            "Parameters": "",
            "Returns": "<tr><td> time</td><td>number</td><td> The remaining time of the PvP timer, or 0.0 if elapsed</td></tr>"
        },
        "getMass": {
            "Name": "getMass()",
            "Description": "     Returns the mass of the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getInertialMass": {
            "Name": "getInertialMass()",
            "Description": "     Returns the inertial mass of the construct, calculated as 1/3 of the trace of the inertial tensor",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getInertialTensor": {
            "Name": "getInertialTensor()",
            "Description": "     Returns the inertial tensor of the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getCenterOfMass": {
            "Name": "getCenterOfMass()",
            "Description": "     Returns the position of the center of mass of the construct, in local construct coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldCenterOfMass": {
            "Name": "getWorldCenterOfMass()",
            "Description": "     Returns the position of the center of mass of the construct, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getCrossSection": {
            "Name": "getCrossSection()",
            "Description": "     Returns the construct's cross sectional surface in the current direction of movement",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The construct's surface exposed in the current direction of movement in meters square</td></tr>"
        },
        "getSize": {
            "Name": "getSize()",
            "Description": "     Returns the size of the building zone of the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getBoundingBoxSize": {
            "Name": "getBoundingBoxSize()",
            "Description": "     Returns the size of the bounding box of the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getBoundingBoxCenter": {
            "Name": "getBoundingBoxCenter()",
            "Description": "     Returns the position of the center of bounding box of the construct in local construct coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getMaxSpeed": {
            "Name": "getMaxSpeed()",
            "Description": "     Returns the max speed along current moving direction",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The max speed along current moving direction in m/s</td></tr>"
        },
        "getMaxAngularSpeed": {
            "Name": "getMaxAngularSpeed()",
            "Description": "     Returns the max angular speed",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The max angular speed in rad/s</td></tr>"
        },
        "getMaxSpeedPerAxis": {
            "Name": "getMaxSpeedPerAxis()",
            "Description": "     Returns the max speed per axis",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The max speed along axes {x, -x, y, -y, z, -z} in m/s</td></tr>"
        },
        "getMaxThrustAlongAxis": {
            "Name": "getMaxThrustAlongAxis(taglist, CRefAxis)",
            "Description": "     Returns the construct max kinematics parameters in both atmo and space range, in newtons. Kinematics",
            "Parameters": "<tr><td> taglist </td><td>string</td><td> Comma (for union) or space (for intersection) separated list of tags. You can set tags directly on the engines in the right-click menu</td></tr><tr><td> CRefAxis </td><td>table</td><td> Axis along which to compute the max force (in construct reference)</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> The kinematics parameters in Newtons in the order: atmoRange.FMaxPlus, atmoRange.FMaxMinus, spaceRange.FMaxPlus, spaceRange.FMaxMinus</td></tr>"
        },
        "getCurrentBrake": {
            "Name": "getCurrentBrake()",
            "Description": "     Returns the current braking force generated by construct brakes",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current braking force in Newtons</td></tr>"
        },
        "getMaxBrake": {
            "Name": "getMaxBrake()",
            "Description": "     Returns the maximum braking force that can currently be generated by the construct brakes",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The maximum braking force in Newtons</td></tr>"
        },
        "getWorldPosition": {
            "Name": "getWorldPosition()",
            "Description": "     Returns the world position of the construct",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The xyz world coordinates of the construct center position in meters</td></tr>"
        },
        "getVelocity": {
            "Name": "getVelocity()",
            "Description": "     The construct's linear velocity, relative to its parent, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Relative linear velocity vector, in construct local coordinates in m/s</td></tr>"
        },
        "getWorldVelocity": {
            "Name": "getWorldVelocity()",
            "Description": "     The construct's linear velocity, relative to its parent, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Relative linear velocity vector, in world coordinates in m/s</td></tr>"
        },
        "getAbsoluteVelocity": {
            "Name": "getAbsoluteVelocity()",
            "Description": "     The construct's absolute linear velocity, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Absolute linear velocity vector, in construct local coordinates in m/s</td></tr>"
        },
        "getWorldAbsoluteVelocity": {
            "Name": "getWorldAbsoluteVelocity()",
            "Description": "     The construct's absolute linear velocity, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Absolute linear velocity vector, in world coordinates in m/s</td></tr>"
        },
        "getAcceleration": {
            "Name": "getAcceleration()",
            "Description": "     The construct's linear acceleration, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Linear acceleration vector, in construct local coordinates in m/s2</td></tr>"
        },
        "getWorldAcceleration": {
            "Name": "getWorldAcceleration()",
            "Description": "     The construct's linear acceleration, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Linear acceleration vector, in world coordinates in m/s2</td></tr>"
        },
        "getAngularVelocity": {
            "Name": "getAngularVelocity()",
            "Description": "     The construct's angular velocity, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Angular velocity vector, in construct local coordinates in rad/s</td></tr>"
        },
        "getWorldAngularVelocity": {
            "Name": "getWorldAngularVelocity()",
            "Description": "     The construct's angular velocity, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Angular velocity vector, in world coordinates in rad/s</td></tr>"
        },
        "getAngularAcceleration": {
            "Name": "getAngularAcceleration()",
            "Description": "     The construct's angular acceleration, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Angular acceleration vector, in construct local coordinates in rad/s2</td></tr>"
        },
        "getWorldAngularAcceleration": {
            "Name": "getWorldAngularAcceleration()",
            "Description": "     The construct's angular acceleration, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Angular acceleration vector, in world coordinates in rad/s2</td></tr>"
        },
        "getWorldAirFrictionAcceleration": {
            "Name": "getWorldAirFrictionAcceleration()",
            "Description": "     Returns the acceleration generated by air resistance",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The xyz world acceleration generated by air resistance</td></tr>"
        },
        "getWorldAirFrictionAngularAcceleration": {
            "Name": "getWorldAirFrictionAngularAcceleration()",
            "Description": "     Returns the acceleration torque generated by air resistance",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The xyz world acceleration torque generated by air resistance</td></tr>"
        },
        "getFrictionBurnSpeed": {
            "Name": "getFrictionBurnSpeed()",
            "Description": "     Returns the speed at which your construct will suffer damage due to friction with the air",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The construct speed to get damages due to friction in m/s</td></tr>"
        },
        "getForward": {
            "Name": "getForward()",
            "Description": "     Returns the forward vector of the construct coordinates system",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The forward vector of the construct coordinates system. It's a static value equal to (0,1,0)</td></tr>"
        },
        "getRight": {
            "Name": "getRight()",
            "Description": "     Returns the right vector of the construct coordinates system",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The right vector of the construct coordinates system. It's a static value equal to (1,0,0)</td></tr>"
        },
        "getUp": {
            "Name": "getUp()",
            "Description": "     Returns the up direction vector of the construct coordinates system",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The up vector of the construct coordinates system.. It's a static value equal to (0,0,1)</td></tr>"
        },
        "getWorldForward": {
            "Name": "getWorldForward()",
            "Description": "     Returns the forward direction vector of the construct, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The forward direction vector of the construct, in world coordinates</td></tr>"
        },
        "getWorldRight": {
            "Name": "getWorldRight()",
            "Description": "     Returns the right direction vector of the construct, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The right direction vector of the construct, in world coordinates</td></tr>"
        },
        "getWorldUp": {
            "Name": "getWorldUp()",
            "Description": "     Returns the up direction vector of the construct, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The up direction vector of the construct, in world coordinates</td></tr>"
        },
        "getOrientationUnitId": {
            "Name": "getOrientationUnitId()",
            "Description": "     Returns the local id of the current active orientation unit (core unit or gyro unit)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> local id of the current active orientation unit (core unit or gyro unit)</td></tr>"
        },
        "getOrientationForward": {
            "Name": "getOrientationForward()",
            "Description": "     Returns the forward direction vector of the active orientation unit, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Forward direction vector of the active orientation unit, in construct local coordinates</td></tr>"
        },
        "getOrientationRight": {
            "Name": "getOrientationRight()",
            "Description": "     Returns the right direction vector of the active orientation unit, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Right direction vector of the active orientation unit, in construct local coordinates</td></tr>"
        },
        "getOrientationUp": {
            "Name": "getOrientationUp()",
            "Description": "     Returns the up direction vector of the active orientation unit, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Up direction vector of the active orientation unit, in construct local coordinates</td></tr>"
        },
        "getWorldOrientationForward": {
            "Name": "getWorldOrientationForward()",
            "Description": "     Returns the forward direction vector of the active orientation unit, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Forward direction vector of the active orientation unit, in world coordinates</td></tr>"
        },
        "getWorldOrientationRight": {
            "Name": "getWorldOrientationRight()",
            "Description": "     Returns the right direction vector of the active orientation unit, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Right direction vector of the active orientation unit, in world coordinates</td></tr>"
        },
        "getWorldOrientationUp": {
            "Name": "getWorldOrientationUp()",
            "Description": "     Returns the up direction vector of the active orientation unit, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Up direction vector of the active orientation unit, in world coordinates</td></tr>"
        },
        "getParent": {
            "Name": "getParent()",
            "Description": "     Returns the id of the parent construct of our active construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getClosestParent": {
            "Name": "getClosestParent()",
            "Description": "     Returns the id of the nearest constructs, on which the construct can dock",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getCloseParents": {
            "Name": "getCloseParents()",
            "Description": "     Returns the list of ids of nearby constructs, on which the construct can dock",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getParentPosition": {
            "Name": "getParentPosition()",
            "Description": "     Returns the position of the construct's parent when docked in local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The position of the construct's parent in local coordinates</td></tr>"
        },
        "getParentWorldPosition": {
            "Name": "getParentWorldPosition()",
            "Description": "     Returns the position of the construct's parent when docked in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The position of the construct's parent in world coordinates</td></tr>"
        },
        "getParentForward": {
            "Name": "getParentForward()",
            "Description": "     Returns the construct's parent forward direction vector, in local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The construct's parent forward direction vector, in local coordinates</td></tr>"
        },
        "getParentRight": {
            "Name": "getParentRight()",
            "Description": "     Returns the construct's parent right direction vector, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The construct's parent right direction vector, in construct local coordinates</td></tr>"
        },
        "getParentUp": {
            "Name": "getParentUp()",
            "Description": "     Returns the construct's parent up direction vector, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The construct's parent up direction vector, in construct local coordinates</td></tr>"
        },
        "getParentWorldForward": {
            "Name": "getParentWorldForward()",
            "Description": "     Returns the construct's parent forward direction vector, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The construct's parent forward direction vector, in world coordinates</td></tr>"
        },
        "getParentWorldRight": {
            "Name": "getParentWorldRight()",
            "Description": "     Returns the construct's parent right direction vector, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The construct's parent right direction vector, in world coordinates</td></tr>"
        },
        "getParentWorldUp": {
            "Name": "getParentWorldUp()",
            "Description": "     Returns the construct's parent up direction vector, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The construct's parent up direction vector, in world coordinates</td></tr>"
        },
        "getPlayersOnBoard": {
            "Name": "getPlayersOnBoard()",
            "Description": "     Returns the list of player IDs on board the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getPlayersOnBoardInVRStation": {
            "Name": "getPlayersOnBoardInVRStation()",
            "Description": "     Returns the list of player ids on board the construct inside a VR Station",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "isPlayerBoarded": {
            "Name": "isPlayerBoarded(id)",
            "Description": "     Checks if the given player is on board in the construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The player id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "isPlayerBoardedInVRStation": {
            "Name": "isPlayerBoardedInVRStation(id)",
            "Description": "     Returns 1 if the given player is boarded to the construct inside a VR Station",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The player id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getBoardedPlayerMass": {
            "Name": "getBoardedPlayerMass(id)",
            "Description": "     Returns the mass of the given player or surrogate if it is on board the construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The player id</td></tr>",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getBoardedInVRStationAvatarMass": {
            "Name": "getBoardedInVRStationAvatarMass(id)",
            "Description": "     Returns the mass of the given player if in VR station on board the construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The player id</td></tr>",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getDockedConstructs": {
            "Name": "getDockedConstructs()",
            "Description": "     Returns the list of IDs of constructs docked to the construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "isConstructDocked": {
            "Name": "isConstructDocked(id)",
            "Description": "     Checks if the given construct is docked to the construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The construct id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getDockedConstructMass": {
            "Name": "getDockedConstructMass(id)",
            "Description": "     Returns the mass of the given construct if it is docked to the construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The construct id</td></tr>",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "setDockingMode": {
            "Name": "setDockingMode(mode)",
            "Description": "     Sets the docking mode",
            "Parameters": "<tr><td> mode </td><td>integer</td><td> The docking mode (Manual = 1, Automatic = 2, Semi-automatic = 3)</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getDockingMode": {
            "Name": "getDockingMode()",
            "Description": "     Returns the current docking mode",
            "Parameters": "",
            "Returns": "<tr><td> mode</td><td>integer</td><td> The docking mode (Manual = 1, Automatic = 2, Semi-automatic = 3)</td></tr>"
        },
        "dock": {
            "Name": "dock(id)",
            "Description": "     Sends a request to dock to the given construct. Limited to piloting controllers",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The parent construct id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "undock": {
            "Name": "undock()",
            "Description": "     Sends a request to undock the construct. Limited to piloting controllers",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "forceDeboard": {
            "Name": "forceDeboard(id)",
            "Description": "     Sends a request to deboard a player or surrogate with the given id",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The player id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "forceUndock": {
            "Name": "forceUndock(id)",
            "Description": "     Sends a request to undock a construct with the given id",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The construct id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "forceInterruptVRSession": {
            "Name": "forceInterruptVRSession(id)",
            "Description": "     Sends a request to interrupt the surrogate session of a player with the given id",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The player id</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "onDocked": {
            "Name": "onDocked",
            "Description": "     Emitted when the construct becomes docked",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The parent id</td></tr>",
            "Returns": ""
        },
        "onUndocked": {
            "Name": "onUndocked",
            "Description": "     Emitted when the construct is undocked",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The previous parent id</td></tr>",
            "Returns": ""
        },
        "onPlayerBoarded": {
            "Name": "onPlayerBoarded",
            "Description": "    Emitted when a player or surrogate boards the construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The id of the boarding player</td></tr>",
            "Returns": ""
        },
        "onVRStationEntered": {
            "Name": "onVRStationEntered",
            "Description": "     Emitted when a player enters a VR Station",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The id of the boarding player</td></tr>",
            "Returns": ""
        },
        "onConstructDocked": {
            "Name": "onConstructDocked",
            "Description": "     Emitted when another construct docks this construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The id of the docking construct</td></tr>",
            "Returns": ""
        },
        "onPvPTimer": {
            "Name": "onPvPTimer",
            "Description": "     Emitted when the PvP timer started or elapsed",
            "Parameters": "<tr><td> active </td><td>boolean</td><td> 1 if the timer started, false when the timer elapsed</td></tr>",
            "Returns": ""
        }
    },
    "container": {
        "getSelfMass": {
            "Name": "getSelfMass()",
            "Description": "     Returns the mass of the container element(as if it were empty).",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getItemsMass": {
            "Name": "getItemsMass()",
            "Description": "     Returns the container content mass(the sum of the mass of all items it contains).",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getItemsVolume": {
            "Name": "getItemsVolume()",
            "Description": "     Returns the container content volume(the sum of the volume of all items it contains).",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxVolume": {
            "Name": "getMaxVolume()",
            "Description": "     Returns the maximum volume of the container.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getContent": {
            "Name": "getContent()",
            "Description": "     Returns a table describing the contents of the container, as a pair itemId and quantity per slot.",
            "Parameters": "",
            "Returns": "<tr><td> content</td><td>table</td><td> The content of the container as a table with fields {[int] id, [float] quantity} per slot</td></tr>"
        },
        "updateContent": {
            "Name": "updateContent()",
            "Description": "     Send a request to get an update of the content of the container, limited to one call allowed per 30 seconds.",
            "Parameters": "",
            "Returns": "<tr><td> time</td><td>number</td><td> If the request is not yet possible, returns the remaining time to wait for.</td></tr>"
        },
        "onContentUpdate": {
            "Name": "onContentUpdate",
            "Description": "     Emitted when the container content is updated(storage update or after a manual request made with updateContent())",
            "Parameters": "",
            "Returns": ""
        }
    },
    "controlunit": {
        "exit": {
            "Name": "exit()",
            "Description": "     Stops the Control Unit's Lua code and exits. Warning: calling this might cause your ship to fall from the sky,",
            "Parameters": "",
            "Returns": ""
        },
        "setTimer": {
            "Name": "setTimer(tag, period)",
            "Description": "     Set up a timer with a given tag in a given period. This will start to trigger the 'onTimer' event with",
            "Parameters": "<tr><td> tag </td><td>string</td><td> The tag of the timer, as a </td><td>string</td><td>, which will be used in the 'onTimer' event to identify this particular timer</td></tr><tr><td> period </td><td>number</td><td> The period of the timer, in seconds. The time resolution is limited by the framerate here, so you cannot set arbitrarily fast timers</td></tr>",
            "Returns": ""
        },
        "stopTimer": {
            "Name": "stopTimer(tag)",
            "Description": "     Stop the timer with the given tag",
            "Parameters": "<tr><td> tag </td><td>string</td><td> The tag of the timer to stop, as a </td><td>string</td><td></td></tr>",
            "Returns": ""
        },
        "onTimer": {
            "Name": "onTimer",
            "Description": "     Emitted when the timer with the tag 'tag' is ticking",
            "Parameters": "<tr><td> tag </td><td>string</td><td> The tag of the timer that just ticked (see setTimer to set a timer with a given tag)</td></tr>",
            "Returns": ""
        },
        "getAtmosphereDensity": {
            "Name": "getAtmosphereDensity()",
            "Description": "     Returns the ambient atmospheric density",
            "Parameters": "",
            "Returns": "<tr><td> density</td><td>number</td><td> The atmospheric density(between 0 and 1)</td></tr>"
        },
        "getClosestPlanetInfluence": {
            "Name": "getClosestPlanetInfluence()",
            "Description": "     Returns the influence rate of the nearest planet",
            "Parameters": "",
            "Returns": "<tr><td> rate</td><td>number</td><td> The planet influence rate(between 0 and 1)</td></tr>"
        },
        "hasDRM": {
            "Name": "hasDRM()",
            "Description": "     Checks if the control unit is protected by DRM",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "isRemoteControlled": {
            "Name": "isRemoteControlled()",
            "Description": "     Check if the construct is remote controlled",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setEngineCommand": {
            "Name": "setEngineCommand(taglist, acceleration, angularAcceleration, keepForceCollinearity, keepTorqueCollinearity, priority1SubTags, priority2SubTags, priority3SubTags, toleranceRatioToStopCommand)",
            "Description": "     Automatically assign the engines within the taglist",
            "Parameters": "<tr><td> taglist </td><td>string</td><td> Comma (for union) or space (for intersection) separated list of tags. You can set tags directly on the engines in the right-click menu</td></tr><tr><td> acceleration </td><td>table</td><td> The desired acceleration expressed in world coordinates in m/s2</td></tr><tr><td> angularAcceleration </td><td>table</td><td> The desired angular acceleration expressed in world coordinates in rad/s2</td></tr><tr><td> keepForceCollinearity </td><td>boolean</td><td> Forces the resulting acceleration vector to be collinear to the acceleration parameter</td></tr><tr><td> keepTorqueCollinearity </td><td>boolean</td><td> Forces the resulting angular acceleration vector to be collinear to the angular acceleration parameter</td></tr><tr><td> priority1SubTags </td><td>string</td><td> Comma (for union) or space (for intersection) separated list of tags of included engines to use as priority 1</td></tr><tr><td> priority2SubTags </td><td>string</td><td> Comma (for union) or space (for intersection) separated list of tags of included engines to use as priority 2</td></tr><tr><td> priority3SubTags </td><td>string</td><td> Comma (for union) or space (for intersection) separated list of tags of included engines to use as priority 3</td></tr><tr><td> toleranceRatioToStopCommand </td><td>number</td><td> When going through with priorities, if we reach a command that is achieved within this tolerance, we will stop there</td></tr>",
            "Returns": ""
        },
        "setEngineThrust": {
            "Name": "setEngineThrust(taglist, thrust)",
            "Description": "     Sets the thrust values for all engines in the tag list",
            "Parameters": "<tr><td> taglist </td><td>string</td><td> Comma separated list of tags. You can set tags directly on the engines in the right-click menu</td></tr><tr><td> thrust </td><td>number</td><td> The desired thrust in newtons (note that for boosters, any non zero value here will set them to 100%)</td></tr>",
            "Returns": ""
        },
        "getEngineThrust": {
            "Name": "getEngineThrust(taglist)",
            "Description": "     Returns the total thrust values of all engines in the tag list",
            "Parameters": "<tr><td> taglist </td><td>string</td><td> Comma separated list of tags. You can set tags directly on the engines in the right-click menu</td></tr>",
            "Returns": "<tr><td> The</td><td>table</td><td> total thrust in newtons</td></tr>"
        },
        "setAxisCommandValue": {
            "Name": "setAxisCommandValue(axis, commandValue)",
            "Description": "     Set the value of throttle in the cockpit, which will be displayed in the cockpit widget when flying",
            "Parameters": "<tr><td> axis </td><td>integer</td><td> Longitudinal = 0, lateral = 1, vertical = 2</td></tr><tr><td> commandValue </td><td>number</td><td> In 'by throttle', the value of the throttle position: -1 = full reverse, 1 = full forward. Or In 'By Target Speed', the value of the target speed in km/h</td></tr>",
            "Returns": ""
        },
        "getAxisCommandValue": {
            "Name": "getAxisCommandValue(axis)",
            "Description": "     Get the value of throttle in the cockpit",
            "Parameters": "<tr><td> axis </td><td>integer</td><td> Longitudinal = 0, lateral = 1, vertical = 2</td></tr>",
            "Returns": "<tr><td> value</td><td>number</td><td> In travel mode, return the value of the throttle position: -1 = full reverse, 1 = full forward or in cruise mode, return the value of the target speed</td></tr>"
        },
        "setupAxisCommandProperties": {
            "Name": "setupAxisCommandProperties(axis, commandType, targetSpeedRanges)",
            "Description": "     Set the properties of an axis command",
            "Parameters": "<tr><td> axis </td><td>integer</td><td> Longitudinal = 0, lateral = 1, vertical = 2</td></tr><tr><td> commandType </td><td>integer</td><td> By throttle = 0, by target speed = 1, hidden = 2</td></tr><tr><td> targetSpeedRanges </td><td>table</td><td> This is to specify the cruise control target speed ranges (for now, only for the longitudinal axis) in m/s</td></tr>",
            "Returns": ""
        },
        "getControlMode": {
            "Name": "getControlMode()",
            "Description": "     Returns the current control mode. The mode is set by clicking the UI button or using the associated keybinding",
            "Parameters": "",
            "Returns": "<tr><td> The</td><td>integer</td><td> current control mode (for now, only 2 are available, 0 and 1)</td></tr>"
        },
        "cancelCurrentControlMasterMode": {
            "Name": "cancelCurrentControlMasterMode()",
            "Description": "     Cancel the current master mode in use",
            "Parameters": "",
            "Returns": ""
        },
        "isMouseControlActivated": {
            "Name": "isMouseControlActivated()",
            "Description": "     Check if a mouse control scheme is selected",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "isMouseDirectControlActivated": {
            "Name": "isMouseDirectControlActivated()",
            "Description": "     Check if the mouse control direct scheme is selected",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "isMouseVirtualJoystickActivated": {
            "Name": "isMouseVirtualJoystickActivated()",
            "Description": "     Check if the mouse control virtual joystick scheme is selected",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "activateGroundEngineAltitudeStabilization": {
            "Name": "activateGroundEngineAltitudeStabilization(targetAltitude)",
            "Description": "     The ground engines will stabilize to this altitude within their limits",
            "Parameters": "<tr><td> targetAltitude </td><td>number</td><td> The stabilization target altitude in m</td></tr>",
            "Returns": ""
        },
        "getSurfaceEngineAltitudeStabilization": {
            "Name": "getSurfaceEngineAltitudeStabilization()",
            "Description": "     Return the ground engines' stabilization altitude",
            "Parameters": "",
            "Returns": "<tr><td> Stab</td><td>number</td><td> altitude in m or 0 if none is set</td></tr>"
        },
        "deactivateGroundEngineAltitudeStabilization": {
            "Name": "deactivateGroundEngineAltitudeStabilization()",
            "Description": "     The ground engines will behave like regular engine",
            "Parameters": "",
            "Returns": ""
        },
        "computeGroundEngineAltitudeStabilizationCapabilities": {
            "Name": "computeGroundEngineAltitudeStabilizationCapabilities()",
            "Description": "     Returns ground engine stabilization altitude capabilities (lower and upper ranges)",
            "Parameters": "",
            "Returns": "<tr><td> range</td><td>table</td><td> Stabilization altitude capabilities for the least powerful engine and the most powerful engine</td></tr>"
        },
        "getThrottle": {
            "Name": "getThrottle()",
            "Description": "     Return the current throttle value",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Throttle value between -100 and 100</td></tr>"
        },
        "setWidgetControlModeLabel": {
            "Name": "setWidgetControlModeLabel(modeId, label)",
            "Description": "     Set the label of a control mode buttons shown in the control unit widget",
            "Parameters": "<tr><td> modeId </td><td>integer</td><td> The control mode: 0=Travel Mode, 1=Cruise Control by default</td></tr><tr><td> label </td><td>string</td><td> The display name of the control mode, displayed on the widget button</td></tr>",
            "Returns": ""
        },
        "isAnyLandingGearDeployed": {
            "Name": "isAnyLandingGearDeployed()",
            "Description": "     Checks if any landing gear is deployed",
            "Parameters": "",
            "Returns": "<tr><td> or</td><td>0</td><td> 1 1 if any landing gear is deployed</td></tr>"
        },
        "deployLandingGears": {
            "Name": "deployLandingGears()",
            "Description": "     Deploy a end",
            "Parameters": "",
            "Returns": ""
        },
        "retractLandingGears": {
            "Name": "retractLandingGears()",
            "Description": "     Retract all landing gears",
            "Parameters": "",
            "Returns": ""
        },
        "isAnyHeadlightSwitchedOn": {
            "Name": "isAnyHeadlightSwitchedOn()",
            "Description": "     Check construct lights status",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "switchOnHeadlights": {
            "Name": "switchOnHeadlights()",
            "Description": "     Turn on the construct headlights",
            "Parameters": "",
            "Returns": ""
        },
        "switchOffHeadlights": {
            "Name": "switchOffHeadlights()",
            "Description": "     Turn off the construct headlights",
            "Parameters": "",
            "Returns": ""
        }
    },
    "coreunit": {
        "getElementIdList": {
            "Name": "getElementIdList()",
            "Description": "     Returns the list of all the local IDs of the Elements of this construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getElementNameById": {
            "Name": "getElementNameById(localId)",
            "Description": "     Returns the name of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getElementClassById": {
            "Name": "getElementClassById(localId)",
            "Description": "     Returns the class of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getElementDisplayNameById": {
            "Name": "getElementDisplayNameById(localId)",
            "Description": "     Returns the display name of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getElementItemIdById": {
            "Name": "getElementItemIdById(localId)",
            "Description": "     Returns the item ID of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getElementHitPointsById": {
            "Name": "getElementHitPointsById(localId)",
            "Description": "     Returns the current level of hit points of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getElementMaxHitPointsById": {
            "Name": "getElementMaxHitPointsById(localId)",
            "Description": "     Returns the maximum level of hit points of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getElementMassById": {
            "Name": "getElementMassById(localId)",
            "Description": "     Returns the mass of the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getElementPositionById": {
            "Name": "getElementPositionById(localId)",
            "Description": "     Returns the position of the Element, identified by its local ID, in construct local coordinates.",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getElementUpById": {
            "Name": "getElementUpById(localId)",
            "Description": "     Returns the up direction vector of the Element, identified by its local ID, in construct local coordinates",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getElementRightById": {
            "Name": "getElementRightById(localId)",
            "Description": "     Returns the right direction vector of the Element, identified by its local ID, in construct local coordinates",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getElementForwardById": {
            "Name": "getElementForwardById(localId)",
            "Description": "     Returns the forward direction vector of the Element, identified by its local ID, in construct local coordinates",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getElementTagsById": {
            "Name": "getElementTagsById(localId)",
            "Description": "     Returns the list of tags associated to the Element, identified by its local ID",
            "Parameters": "<tr><td> localId </td><td>integer</td><td> The local ID of the Element</td></tr>",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getAltitude": {
            "Name": "getAltitude()",
            "Description": "     Returns the altitude above sea level, with respect to the closest planet (0 in space)",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getGravityIntensity": {
            "Name": "getGravityIntensity()",
            "Description": "     Returns the local gravity intensity",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getWorldGravity": {
            "Name": "getWorldGravity()",
            "Description": "     Returns the local gravity vector in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldVertical": {
            "Name": "getWorldVertical()",
            "Description": "     Returns the vertical unit vector along gravity, in world coordinates (0 in space)",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getCurrentPlanetId": {
            "Name": "getCurrentPlanetId()",
            "Description": "     Returns the id of the current close stellar body",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getCoreStress": {
            "Name": "getCoreStress()",
            "Description": "     Returns the core's current stress, destroyed when reaching max stress",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxCoreStress": {
            "Name": "getMaxCoreStress()",
            "Description": "     Returns the maximal stress the core can bear before it gets destroyed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCoreStressRatio": {
            "Name": "getCoreStressRatio()",
            "Description": "     Returns the core's current stress to max stress ratio",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "onStressChanged": {
            "Name": "onStressChanged",
            "Description": "     Emitted when core unit stress changed",
            "Parameters": "<tr><td> stress </td><td>number</td><td> Difference to previous stress value</td></tr>",
            "Returns": ""
        },
        "spawnNumberSticker": {
            "Name": "spawnNumberSticker(nb,x,y,z,orientation)",
            "Description": "     Spawns a number sticker in the 3D world, with coordinates relative to the construct",
            "Parameters": "<tr><td> nb </td><td>integer</td><td> The </td><td>number</td><td> to display 0 to 9</td></tr><tr><td> x </td><td>number</td><td> The x-coordinate in the construct in meters. 0 = center</td></tr><tr><td> y </td><td>number</td><td> The y-coordinate in the construct in meters. 0 = center</td></tr><tr><td> z </td><td>number</td><td> The z-coordinate in the construct in meters. 0 = center</td></tr><tr><td> orientation </td><td>string</td><td> Orientation of the </td><td>number</td><td>. Possible values are \"front\", \"side\"</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "spawnArrowSticker": {
            "Name": "spawnArrowSticker(x,y,z,orientation)",
            "Description": "     Spawns an arrow sticker in the 3D world, with coordinates relative to the construct",
            "Parameters": "<tr><td> x </td><td>number</td><td> The x-coordinate in the construct in meters. 0 = center</td></tr><tr><td> y </td><td>number</td><td> the y-coordinate in the construct in meters. 0 = center</td></tr><tr><td> z </td><td>number</td><td> The z-coordinate in the construct in meters. 0 = center</td></tr><tr><td> orientation </td><td>string</td><td> Orientation of the arrow. Possible values are \"up\", \"down\", \"north\", \"south\", \"east\", \"west\"</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "deleteSticker": {
            "Name": "deleteSticker(index)",
            "Description": "     Delete the referenced sticker",
            "Parameters": "<tr><td> index </td><td>integer</td><td> Index of the sticker to delete</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "moveSticker": {
            "Name": "moveSticker(index,x,y,z)",
            "Description": "     Move the referenced sticker",
            "Parameters": "<tr><td> index </td><td>integer</td><td> Index of the sticker to move</td></tr><tr><td> x </td><td>number</td><td> The x-coordinate in the construct in meters. 0 = center</td></tr><tr><td> y </td><td>number</td><td> The y-coordinate in the construct in meters. 0 = center</td></tr><tr><td> z </td><td>number</td><td> The z-coordinate in the construct in meters. 0 = center</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "rotateSticker": {
            "Name": "rotateSticker(index,angle_x,angle_y,angle_z)",
            "Description": "     Rotate the referenced sticker.",
            "Parameters": "<tr><td> index </td><td>integer</td><td> Index of the sticker to rotate</td></tr><tr><td> angle_x </td><td>number</td><td> Rotation along the x-axis in degrees</td></tr><tr><td> angle_y </td><td>number</td><td> Rotation along the y-axis in degrees</td></tr><tr><td> angle_z </td><td>number</td><td> Rotation along the z-axis in degrees</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "counter": {
        "getIndex": {
            "Name": "getIndex()",
            "Description": "     Returns the index of the current active output plug",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getMaxIndex": {
            "Name": "getMaxIndex()",
            "Description": "     Returns the maximum index of the counter",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "nextIndex": {
            "Name": "nextIndex()",
            "Description": "     Moves the next counter index",
            "Parameters": "",
            "Returns": ""
        },
        "setIndex": {
            "Name": "setIndex(index)",
            "Description": "     Sets the counter index",
            "Parameters": "<tr><td> index </td><td>integer</td><td> The index of the plug to activate</td></tr>",
            "Returns": ""
        }
    },
    "databank": {
        "clear": {
            "Name": "clear()",
            "Description": "     Clear the Databank",
            "Parameters": "",
            "Returns": ""
        },
        "getNbKeys": {
            "Name": "getNbKeys()",
            "Description": "     Returns the number of keys that are stored inside the Databank",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getKeyList": {
            "Name": "getKeyList()",
            "Description": "     Returns all the keys in the Databank",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The key list, as a list of string</td></tr>"
        },
        "hasKey": {
            "Name": "hasKey(key)",
            "Description": "     Returns 1 if the key is present in the Databank, 0 otherwise",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to store a value</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the key exists and 0 otherwise</td></tr>"
        },
        "clearValue": {
            "Name": "clearValue(key)",
            "Description": "     Remove the given key if the key is present in the Databank",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to store a value</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the key has been successfully removed, 0 otherwise</td></tr>"
        },
        "setStringValue": {
            "Name": "setStringValue(key,val)",
            "Description": "     Stores a string value at the given key",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to store the value</td></tr><tr><td> val </td><td>string</td><td> The value, as a </td><td>string</td><td></td></tr>",
            "Returns": ""
        },
        "getStringValue": {
            "Name": "getStringValue(key)",
            "Description": "     Returns value stored in the given key as a string",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to retrieve the value</td></tr>",
            "Returns": "<tr><td> value</td><td>string</td><td> The value as a string</td></tr>"
        },
        "setIntValue": {
            "Name": "setIntValue(key,val)",
            "Description": "     Stores an integer value at the given key",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to store the value</td></tr><tr><td> val </td><td>integer</td><td> The value, as an </td><td>integer</td><td></td></tr>",
            "Returns": ""
        },
        "getIntValue": {
            "Name": "getIntValue(key)",
            "Description": "     Returns value stored in the given key as an integer",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to retrieve the value</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> The value as an integer</td></tr>"
        },
        "setFloatValue": {
            "Name": "setFloatValue(key,val)",
            "Description": "     Stores a floating number value at the given key",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to store the value</td></tr><tr><td> val </td><td>number</td><td> The value, as a floating </td><td>number</td><td></td></tr>",
            "Returns": ""
        },
        "getFloatValue": {
            "Name": "getFloatValue(key)",
            "Description": "     Returns value stored in the given key as a floating number",
            "Parameters": "<tr><td> key </td><td>string</td><td> The key used to retrieve the value</td></tr>",
            "Returns": "<tr><td> value</td><td>number</td><td> The value as a floating number</td></tr>"
        }
    },
    "detectionzone": {
        "getRadius": {
            "Name": "getRadius()",
            "Description": "     Returns the detection zone radius",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getPlayers": {
            "Name": "getPlayers()",
            "Description": "     Returns the list of ids of the players in the detection zone",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "onEnter": {
            "Name": "onEnter",
            "Description": "     Emitted when a player enters in the detection zone",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the player. Use system.getPlayerName(id) to retrieve its name</td></tr>",
            "Returns": ""
        },
        "onLeave": {
            "Name": "onLeave",
            "Description": "     Emitted when a player leaves in the detection zone",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the player. Use system.getPlayerName(id) to retrieve its name</td></tr>",
            "Returns": ""
        }
    },
    "door": {
        "open": {
            "Name": "open()",
            "Description": "     Open the door",
            "Parameters": "",
            "Returns": ""
        },
        "close": {
            "Name": "close()",
            "Description": "     Close the door",
            "Parameters": "",
            "Returns": ""
        },
        "isOpen": {
            "Name": "isOpen()",
            "Description": "     Return the opening status of the door",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the door",
            "Parameters": "",
            "Returns": ""
        }
    },
    "element": {
        "showWidget": {
            "Name": "showWidget()",
            "Description": "     Show the element widget in the in-game widget stack",
            "Parameters": "",
            "Returns": ""
        },
        "hideWidget": {
            "Name": "hideWidget()",
            "Description": "     Hide the element widget in the in-game widget stack",
            "Parameters": "",
            "Returns": ""
        },
        "getWidgetType": {
            "Name": "getWidgetType()",
            "Description": "     Returns the widget type compatible with the element data",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getWidgetData": {
            "Name": "getWidgetData()",
            "Description": "     Returns the element data as JSON",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getWidgetDataId": {
            "Name": "getWidgetDataId()",
            "Description": "     Returns the element data ID",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getName": {
            "Name": "getName()",
            "Description": "     Returns the element name",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getClass": {
            "Name": "getClass()",
            "Description": "     Returns the class of the Element",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getMass": {
            "Name": "getMass()",
            "Description": "     Returns the mass of the element (includes the included items' mass when the Element is a Container)",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getItemId": {
            "Name": "getItemId()",
            "Description": "     Returns the element item ID (to be used with system.getItem() function to get information about the element).",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getLocalId": {
            "Name": "getLocalId()",
            "Description": "     Returns the unique local ID of the element",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getIntegrity": {
            "Name": "getIntegrity()",
            "Description": "     Returns the element integrity between 0 and 100",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getHitPoints": {
            "Name": "getHitPoints()",
            "Description": "     Returns the element's current hit points (0 = destroyed)",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxHitPoints": {
            "Name": "getMaxHitPoints()",
            "Description": "     Returns the element's maximal hit points",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getRemainingRestorations": {
            "Name": "getRemainingRestorations()",
            "Description": "     Returns the element's remaining number of restorations",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getMaxRestorations": {
            "Name": "getMaxRestorations()",
            "Description": "     Returns the element's maximal number of restorations",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getPosition": {
            "Name": "getPosition()",
            "Description": "     Returns the position of the Element in construct local coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getBoundingBoxSize": {
            "Name": "getBoundingBoxSize()",
            "Description": "     Returns the bounding box dimensions of the element.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getBoundingBoxCenter": {
            "Name": "getBoundingBoxCenter()",
            "Description": "     Returns the position of the center of bounding box of the element in local construct coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getUp": {
            "Name": "getUp()",
            "Description": "     Returns the up direction vector of the Element in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getRight": {
            "Name": "getRight()",
            "Description": "     Returns the right direction vector of the Element in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getForward": {
            "Name": "getForward()",
            "Description": "     Returns the forward direction vector of the Element in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldUp": {
            "Name": "getWorldUp()",
            "Description": "     Returns the up direction vector of the Element in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldRight": {
            "Name": "getWorldRight()",
            "Description": "     Returns the right direction vector of the Element in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldForward": {
            "Name": "getWorldForward()",
            "Description": "     Returns the forward direction vector of the Element in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "setSignalIn": {
            "Name": "setSignalIn(plug, state)",
            "Description": "     Set the value of a signal in the specified IN plug of the Element.",
            "Parameters": "<tr><td> plug </td><td>string</td><td> The plug name, in the form of IN-SIGNAL-index</td></tr><tr><td> state </td><td>integer</td><td> The plug signal state</td></tr>",
            "Returns": ""
        },
        "getSignalIn": {
            "Name": "getSignalIn(plug)",
            "Description": "     Returns the value of a signal in the specified IN plug of the Element.",
            "Parameters": "<tr><td> plug </td><td>string</td><td> The plug name, in the form of IN-SIGNAL-index</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> The plug signal state</td></tr>"
        },
        "getSignalOut": {
            "Name": "getSignalOut(plug)",
            "Description": "     Returns the value of a signal in the specified OUT plug of the Element.",
            "Parameters": "<tr><td> plug </td><td>string</td><td> The plug name, in the form of IN-SIGNAL-index</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> The plug signal state</td></tr>"
        }
    },
    "emitter": {
        "send": {
            "Name": "send(channel,message)",
            "Description": "     Send a message on the given channel, limited to one transmission per frame and per channel",
            "Parameters": "<tr><td> channel </td><td>string</td><td> The channel name, limited to 64 characters. The message will not be sent if it exceeds this</td></tr><tr><td> message </td><td>string</td><td> The message to be transmitted, truncated to 512 characters in case of overflow</td></tr>",
            "Returns": ""
        },
        "getRange": {
            "Name": "getRange()",
            "Description": "     Returns the emitter range",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "onSent": {
            "Name": "onSent",
            "Description": "     Emitted when the emitter successfully sent a message",
            "Parameters": "<tr><td> channel </td><td>string</td><td> The channel name</td></tr><tr><td> message </td><td>string</td><td> The transmitted message</td></tr>",
            "Returns": ""
        }
    },
    "engine": {
        "getObstructionFactor": {
            "Name": "getObstructionFactor()",
            "Description": "     Returns the obstruction ratio of the engine exhaust by Elements and Voxels.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getTags": {
            "Name": "getTags()",
            "Description": "     Returns the tags of the engine",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "setTags": {
            "Name": "setTags(tags,ignore)",
            "Description": "     Set the tags of the engine",
            "Parameters": "<tr><td> tags </td><td>string</td><td> The CSV </td><td>string</td><td> of the tags</td></tr><tr><td> ignore </td><td>boolean</td><td>: True to ignore the default engine tags</td></tr>",
            "Returns": ""
        },
        "isIgnoringTags": {
            "Name": "isIgnoringTags()",
            "Description": "     Checks if the engine is ignoring default tags",
            "Parameters": "",
            "Returns": "<tr><td> 1</td><td>integer</td><td> if the engine ignores default engine tags</td></tr>"
        }
    },
    "firework": {
        "onFired": {
            "Name": "onFired",
            "Description": "     Emitted when a firework has just been fired",
            "Parameters": "",
            "Returns": ""
        },
        "fire": {
            "Name": "fire()",
            "Description": "     Fire the firework",
            "Parameters": "",
            "Returns": ""
        },
        "setExplosionDelay": {
            "Name": "setExplosionDelay(delay)",
            "Description": "     Set the delay before the launched Fireworks explodes",
            "Parameters": "<tr><td> delay </td><td>number</td><td> The delay before explosion in seconds (maximum 5s)</td></tr>",
            "Returns": ""
        },
        "getExplosionDelay": {
            "Name": "getExplosionDelay(delay)",
            "Description": "     Returns the delay before the launched Fireworks explodes",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "setLaunchSpeed": {
            "Name": "setLaunchSpeed(speed)",
            "Description": "     Set the speed at which the firework will be launched (impacts its altitude, depending on the local gravity).",
            "Parameters": "<tr><td> speed </td><td>number</td><td> The launch speed in m/s (maximum 200m/s)</td></tr>",
            "Returns": ""
        },
        "getLaunchSpeed": {
            "Name": "getLaunchSpeed()",
            "Description": "     Returns the speed at which the firework will be launched",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "setType": {
            "Name": "setType(type)",
            "Description": "     Set the type of launched firework (will affect which firework is picked in the attached Container)",
            "Parameters": "<tr><td> type </td><td>integer</td><td> The type index of the firework (Ball = 1, Ring = 2, Palmtree = 3, Shower = 4)</td></tr>",
            "Returns": ""
        },
        "getType": {
            "Name": "getType()",
            "Description": "     Returns the type of launched firework",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setColor": {
            "Name": "setColor(color)",
            "Description": "     Set the color of the launched firework (will affect which firework is picked in the attached Container)",
            "Parameters": "<tr><td> color </td><td>integer</td><td> The color index of the firework (Blue = 1, Gold = 2, Green = 3, Purple = 4, Red = 5, Silver = 6)</td></tr>",
            "Returns": ""
        },
        "getColor": {
            "Name": "getColor()",
            "Description": "     Returns the color of the launched firework",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "forcefield": {
        "deploy": {
            "Name": "deploy()",
            "Description": "     Deploys the forcefield",
            "Parameters": "",
            "Returns": ""
        },
        "retract": {
            "Name": "retract()",
            "Description": "     Retracts the forcefield",
            "Parameters": "",
            "Returns": ""
        },
        "isDeployed": {
            "Name": "isDeployed()",
            "Description": "     Checks if the forcefield is deployed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the forcefield",
            "Parameters": "",
            "Returns": ""
        }
    },
    "fueledengine": {
        "activate": {
            "Name": "activate()",
            "Description": "     Start the engine at full power (works only when run inside a cockpit or under remote control)",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Stops the engine (works only when run inside a cockpit or under remote control)",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the engine is active",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the engine",
            "Parameters": "",
            "Returns": ""
        },
        "setThrust": {
            "Name": "setThrust(thrust)",
            "Description": "     Set the thrust of the engine",
            "Parameters": "<tr><td> thrust </td><td>number</td><td> The engine thrust in newtons (limited by the maximum thrust)</td></tr>",
            "Returns": ""
        },
        "getThrust": {
            "Name": "getThrust()",
            "Description": "     Returns the current thrust of the engine",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxThrust": {
            "Name": "getMaxThrust()",
            "Description": "     Returns the maximal thrust the engine can deliver in principle, under optimal conditions.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCurrentMinThrust": {
            "Name": "getCurrentMinThrust()",
            "Description": "     Returns the minimal thrust the engine can deliver at the moment (can be more than zero),",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCurrentMaxThrust": {
            "Name": "getCurrentMaxThrust()",
            "Description": "     Returns the maximal thrust the engine can deliver at the moment, which might depend on",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxThrustEfficiency": {
            "Name": "getMaxThrustEfficiency()",
            "Description": "     Returns the ratio between the current maximum thrust and the optimal maximum thrust",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "isTorqueEnabled": {
            "Name": "isTorqueEnabled()",
            "Description": "     Checks if the torque generation is enabled on the engine",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "enableTorque": {
            "Name": "enableTorque(state)",
            "Description": "     Sets the torque generation state on the engine",
            "Parameters": "<tr><td> state </td><td>boolean</td><td></td></tr>",
            "Returns": ""
        },
        "getThrustAxis": {
            "Name": "getThrustAxis()",
            "Description": "     Returns the engine thrust direction in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getTorqueAxis": {
            "Name": "getTorqueAxis()",
            "Description": "     Returns the engine torque axis in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldThrustAxis": {
            "Name": "getWorldThrustAxis()",
            "Description": "     Returns the engine exhaust thrust direction in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getWorldTorqueAxis": {
            "Name": "getWorldTorqueAxis()",
            "Description": "     Returns the engine torque axis in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "isOutOfFuel": {
            "Name": "isOutOfFuel()",
            "Description": "     Checks if the engine out of fuel",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getFuelId": {
            "Name": "getFuelId()",
            "Description": "     Returns the item ID of the fuel currently used by the engine",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getFuelTankId": {
            "Name": "getFuelTankId()",
            "Description": "    Returns the local ID of the fueltank linked to the engine",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "hasFunctionalFuelTank": {
            "Name": "hasFunctionalFuelTank()",
            "Description": "     Checks if the engine linked to a functional Fuel Tank (not broken or colliding)?",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getCurrentFuelRate": {
            "Name": "getCurrentFuelRate()",
            "Description": "     Returns the engine fuel consumption rate per newton of thrust delivered per second",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getFuelRateEfficiency": {
            "Name": "getFuelRateEfficiency()",
            "Description": "     Returns the ratio between the current fuel rate and the theoretical nominal fuel rate",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getFuelConsumption": {
            "Name": "getFuelConsumption()",
            "Description": "     Returns the current fuel consumption rate",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getWarmupTime": {
            "Name": "getWarmupTime()",
            "Description": "     Returns the T50; the time needed for the engine to reach 50% of its maximal thrust (all engines",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        }
    },
    "gyro": {
        "activate": {
            "Name": "activate()",
            "Description": "     Selects this gyro as the main gyro used for ship orientation",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Deselects this gyro as the main gyro used for ship orientation, using the Core Unit instead",
            "Parameters": "",
            "Returns": ""
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the activation state of the gyro",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Returns the activation state of the gyro",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getPitch": {
            "Name": "getPitch()",
            "Description": "     The pitch value relative to the gyro orientation and the local gravity",
            "Parameters": "",
            "Returns": "<tr><td> pitch</td><td>number</td><td> The pitch angle in degrees, relative to the gyro orientation and the local gravity</td></tr>"
        },
        "getRoll": {
            "Name": "getRoll()",
            "Description": "     The roll value relative to the gyro orientation and the local gravity",
            "Parameters": "",
            "Returns": "<tr><td> roll</td><td>number</td><td> The roll angle in degrees, relative to the gyro orientation and the local gravity</td></tr>"
        }
    },
    "industry": {
        "startRun": {
            "Name": "startRun()",
            "Description": "     Start the production, and it will run unless it is stopped or the input resources run out",
            "Parameters": "",
            "Returns": ""
        },
        "startMaintain": {
            "Name": "startMaintain(quantity)",
            "Description": "     Start maintaining the specified quantity. Resumes production when the quantity in the output Container is too low, and pauses production when it is equal or higher",
            "Parameters": "<tr><td> quantity </td><td>integer</td><td> Quantity to maintain inside output containers</td></tr>",
            "Returns": ""
        },
        "startFor": {
            "Name": "startFor(numBatches)",
            "Description": "     Start the production of numBatches and then stop",
            "Parameters": "<tr><td> numBatches </td><td>integer</td><td> Number of batches to run before unit stops</td></tr>",
            "Returns": ""
        },
        "stop": {
            "Name": "stop(force,allowLoss)",
            "Description": "     Stop the production of the industry unit",
            "Parameters": "<tr><td> force </td><td>boolean</td><td> (optional by default false) True if you want to force the production to stop immediately</td></tr><tr><td> allowLoss </td><td>boolean</td><td> (optional by default false) True if you want to allow the industry unit to lose components when recovering in use components</td></tr>",
            "Returns": ""
        },
        "getCyclesCompleted": {
            "Name": "getCyclesCompleted()",
            "Description": "     Get the count of completed cycles since the player started the unit",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getEfficiency": {
            "Name": "getEfficiency()",
            "Description": "     Returns the efficiency of the industry",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getUptime": {
            "Name": "getUptime()",
            "Description": "     Returns the time elapsed in seconds since the player started the unit for the latest time",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getInputs": {
            "Name": "getInputs()",
            "Description": "     Returns the list of items required to run the selected output product.",
            "Parameters": "",
            "Returns": "<tr><td> outputs</td><td>table</td><td> Returns the list of products</td></tr>"
        },
        "getOutputs": {
            "Name": "getOutputs()",
            "Description": "     Returns the list of id of the items currently produced.",
            "Parameters": "",
            "Returns": "<tr><td> outputs</td><td>table</td><td> The first entry in the table is always the main product produced</td></tr>"
        },
        "setOutput": {
            "Name": "setOutput(itemId)",
            "Description": "     Set the item to produce from its id",
            "Parameters": "<tr><td> itemId </td><td>integer</td><td> The item id of the item to produce</td></tr>",
            "Returns": "<tr><td> success</td><td>integer</td><td> The result of the operation 0 for a sucess, -1 if the industry is running</td></tr>"
        },
        "updateBank": {
            "Name": "updateBank()",
            "Description": "     Send a request to get an update of the content of the schematic bank, limited to one call allowed per 30 seconds",
            "Parameters": "",
            "Returns": "<tr><td> time</td><td>number</td><td> If the request is not yet possible, returns the remaining time to wait for</td></tr>"
        },
        "getBank": {
            "Name": "getBank()",
            "Description": "     Returns a table describing the contents of the schematic bank, as a pair itemId and quantity per slot",
            "Parameters": "",
            "Returns": "<tr><td> content</td><td>table</td><td> The content of the schematic bank as a table with fields {[int] id, [float] quantity} per slot</td></tr>"
        },
        "onStarted": {
            "Name": "onStarted",
            "Description": "     Emitted when the Industry Unit has started a new production process",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The product item id</td></tr><tr><td> quantity </td><td>number</td><td> The product quantity</td></tr>",
            "Returns": ""
        },
        "onCompleted": {
            "Name": "onCompleted",
            "Description": "     Emitted when the Industry Unit has completed a run",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The product item id</td></tr><tr><td> quantity </td><td>number</td><td> The product quantity</td></tr>",
            "Returns": ""
        },
        "onStatusChanged": {
            "Name": "onStatusChanged",
            "Description": "     Emitted when the industry status has changed",
            "Parameters": "<tr><td> status </td><td>integer</td><td> The status of the industry can be (Stopped = 1, Running = 2, Jammed missing ingredient = 3, Jammed output full = 4, Jammed no output container = 5, Pending = 6)</td></tr>",
            "Returns": ""
        },
        "onBankUpdate": {
            "Name": "onBankUpdate",
            "Description": "     Emitted when the schematic bank content is updated(bank update or after a manual request made with updateBank())",
            "Parameters": "",
            "Returns": ""
        }
    },
    "landinggear": {
        "deploy": {
            "Name": "deploy()",
            "Description": "     Deploys the landing gear",
            "Parameters": "",
            "Returns": ""
        },
        "retract": {
            "Name": "retract()",
            "Description": "     Retracts the landing gear",
            "Parameters": "",
            "Returns": ""
        },
        "isDeployed": {
            "Name": "isDeployed()",
            "Description": "     Checks if the landing gear is deployed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the landing gear",
            "Parameters": "",
            "Returns": ""
        }
    },
    "laserdetector": {
        "onHit": {
            "Name": "onHit",
            "Description": "     Emitted when a laser hit the detector",
            "Parameters": "",
            "Returns": ""
        },
        "onLoss": {
            "Name": "onLoss",
            "Description": "     Emitted when all lasers stop hitting the detector",
            "Parameters": "",
            "Returns": ""
        },
        "isHit": {
            "Name": "isHit()",
            "Description": "     Checks if any laser is hitting the detector",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "laseremitter": {
        "activate": {
            "Name": "activate()",
            "Description": "     Activates the laser emitter",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Deactivates the laser emitter",
            "Parameters": "",
            "Returns": ""
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the laser emitter",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the laser emitter is active",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "library": {
        "systemResolution3": {
            "Name": "systemResolution3(c1,c2,c3,c0)",
            "Description": "     Solve the 3D linear system M*x=c0 where M is defined by its column vectors c1,c2,c3",
            "Parameters": "<tr><td> c1 </td><td>table</td><td> The first column of the matrix M</td></tr><tr><td> c2 </td><td>table</td><td> The second column of the matrix M</td></tr><tr><td> c3 </td><td>table</td><td> The third column of the matrix M</td></tr><tr><td> c0 </td><td>table</td><td> The target column vector of the system</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> The vec3 solution of the above system</td></tr>"
        },
        "systemResolution2": {
            "Name": "systemResolution2(c1,c2,c0)",
            "Description": "     Solve the 2D linear system M*x=c0 where M is defined by its column vectors c1,c2",
            "Parameters": "<tr><td> c1 </td><td>table</td><td> The first column of the matrix M</td></tr><tr><td> c2 </td><td>table</td><td> The second column of the matrix M</td></tr><tr><td> c0 </td><td>table</td><td> The target column vector of the system</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> The vec2 solution of the above system</td></tr>"
        },
        "getPointOnScreen": {
            "Name": "getPointOnScreen(worldPos)",
            "Description": "     Returns the position of the given point in world coordinates system, on the game screen",
            "Parameters": "<tr><td> worldPos </td><td>table</td><td>: The world position of the point</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> The position in percentage (between 0 and 1) of the screen resolution as vec3 with {x, y, depth}</td></tr>"
        }
    },
    "light": {
        "activate": {
            "Name": "activate()",
            "Description": "     Switches the light on",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Switches the light off",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the light is on",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the light",
            "Parameters": "",
            "Returns": ""
        },
        "setColor": {
            "Name": "setColor(r,g,b)",
            "Description": "     Set the light color in RGB. Lights can use HDR color values above 1.0 to glow.",
            "Parameters": "<tr><td> r </td><td>number</td><td> The red component, between 0.0 and 1.0, up to 5.0 for HDR colors.</td></tr><tr><td> g </td><td>number</td><td> The green component, between 0.0 and 1.0, up to 5.0 for HDR colors.</td></tr><tr><td> b </td><td>number</td><td> The blue component, between 0.0 and 1.0, up to 5.0 for HDR colors.</td></tr>",
            "Returns": ""
        },
        "getColor": {
            "Name": "getColor()",
            "Description": "     Returns the light color in RGB",
            "Parameters": "",
            "Returns": "<tr><td> color</td><td>table</td><td> A vec3 for the red, blue and green components of the light, with values between 0.0 and 1.0, up to 5.0.</td></tr>"
        },
        "setBlinkingState": {
            "Name": "setBlinkingState(state)",
            "Description": "     Returns the blinking state of the light",
            "Parameters": "<tr><td> state </td><td>boolean</td><td> True to enable light blinking</td></tr>",
            "Returns": ""
        },
        "isBlinking": {
            "Name": "isBlinking()",
            "Description": "     Checks if the light blinking is enabled",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getOnBlinkingDuration": {
            "Name": "getOnBlinkingDuration()",
            "Description": "     Returns the light 'on' blinking duration",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "setOnBlinkingDuration": {
            "Name": "setOnBlinkingDuration(time)",
            "Description": "     Set the light 'on' blinking duration",
            "Parameters": "<tr><td> time </td><td>number</td><td> The duration of the 'on' blinking in seconds</td></tr>",
            "Returns": ""
        },
        "getOffBlinkingDuration": {
            "Name": "getOffBlinkingDuration()",
            "Description": "     Returns the light 'off' blinking duration",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "setOffBlinkingDuration": {
            "Name": "setOffBlinkingDuration(time)",
            "Description": "     Set the light 'off' blinking duration",
            "Parameters": "<tr><td> time </td><td>number</td><td> The duration of the 'off' blinking in seconds</td></tr>",
            "Returns": ""
        },
        "getBlinkingTimeShift": {
            "Name": "getBlinkingTimeShift()",
            "Description": "     Returns the light blinking time shift",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "setBlinkingTimeShift": {
            "Name": "setBlinkingTimeShift(shift)",
            "Description": "     Set the light blinking time shift",
            "Parameters": "<tr><td> shift </td><td>number</td><td> The time shift of the blinking</td></tr>",
            "Returns": ""
        }
    },
    "manualbutton": {
        "onPressed": {
            "Name": "onPressed",
            "Description": "     Emitted when the button is pressed",
            "Parameters": "",
            "Returns": ""
        },
        "onReleased": {
            "Name": "onReleased",
            "Description": "     Emitted when the button is released",
            "Parameters": "",
            "Returns": ""
        },
        "isDown": {
            "Name": "isDown()",
            "Description": "     Checks if the manual button is down",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "manualswitch": {
        "onPressed": {
            "Name": "onPressed",
            "Description": "     Emitted when the button is pressed",
            "Parameters": "",
            "Returns": ""
        },
        "onReleased": {
            "Name": "onReleased",
            "Description": "     Emitted when the button is released",
            "Parameters": "",
            "Returns": ""
        },
        "activate": {
            "Name": "activate()",
            "Description": "     Switches the switch on",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Switches the switch off",
            "Parameters": "",
            "Returns": ""
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the switch",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the switch is active",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "miningunit": {
        "getState": {
            "Name": "getState()",
            "Description": "     Returns the current state of the mining unit",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> The status of the mining unit can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)</td></tr>"
        },
        "getRemainingTime": {
            "Name": "getRemainingTime()",
            "Description": "     Returns the remaining time of the current batch extraction process.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getActiveOre": {
            "Name": "getActiveOre()",
            "Description": "     Returns the item ID of the currently selected ore.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getOrePools": {
            "Name": "getOrePools()",
            "Description": "     Returns the list of available ore pools",
            "Parameters": "",
            "Returns": "<tr><td> pool</td><td>table</td><td> A list of tables composed with {[int] oreId, [float] available, [float] maximum);</td></tr>"
        },
        "getBaseRate": {
            "Name": "getBaseRate()",
            "Description": "     Returns the base production rate of the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getEfficiency": {
            "Name": "getEfficiency()",
            "Description": "     Returns the efficiency rate of the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCalibrationRate": {
            "Name": "getCalibrationRate()",
            "Description": "     Returns the calibration rate of the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getOptimalRate": {
            "Name": "getOptimalRate()",
            "Description": "     Returns the optimal calibration rate of the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getProductionRate": {
            "Name": "getProductionRate()",
            "Description": "     Returns the current production rate of the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getAdjacencyBonus": {
            "Name": "getAdjacencyBonus()",
            "Description": "     Returns the territory's adjacency bonus to the territory of the mining unit. Note: This value is updated only when a new batch is started.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getLastExtractionPosition": {
            "Name": "getLastExtractionPosition()",
            "Description": "     Returns the position of the last calibration excavation, in world coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getLastExtractingPlayerId": {
            "Name": "getLastExtractingPlayerId()",
            "Description": "     Returns the ID of the last player who calibrated the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getLastExtractionTime": {
            "Name": "getLastExtractionTime()",
            "Description": "     Returns the time in seconds since the last calibration of the mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getLastExtractedOre": {
            "Name": "getLastExtractedOre()",
            "Description": "     Returns the item ID of the ore extracted during the last calibration excavation.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getLastExtractedVolume": {
            "Name": "getLastExtractedVolume()",
            "Description": "     Returns the volume of ore extracted during the last calibration excavation.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "onCalibrated": {
            "Name": "onCalibrated",
            "Description": "     Emitted when the mining unit is calibrated.",
            "Parameters": "<tr><td> oreId </td><td>integer</td><td> The item ID of the ore extracted during the calibration process</td></tr><tr><td> amount </td><td>number</td><td> Amount of ore extracted during the calibration process</td></tr><tr><td> rate </td><td>number</td><td> The new calibration rate after calibration process</td></tr>",
            "Returns": ""
        },
        "onStarted": {
            "Name": "onStarted",
            "Description": "     Emitted when the mining unit started a new extraction process.",
            "Parameters": "<tr><td> oreId </td><td>number</td><td> The item ID of the ore mined during the extraction process</td></tr>",
            "Returns": ""
        },
        "onCompleted": {
            "Name": "onCompleted",
            "Description": "     Emitted when the mining unit complete a batch.",
            "Parameters": "<tr><td> oreId </td><td>number</td><td> The item ID of the ore mined during the extraction process</td></tr><tr><td> amount </td><td>number</td><td> Amount of ore mined</td></tr>",
            "Returns": ""
        },
        "onStatusChanged": {
            "Name": "onStatusChanged",
            "Description": "     Emitted when the mining unit status is changed.",
            "Parameters": "<tr><td> status </td><td>integer</td><td> The status of the mining unit can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)</td></tr>",
            "Returns": ""
        },
        "onStopped": {
            "Name": "onStopped",
            "Description": "     Emitted when the mining unit stopped the extraction process.",
            "Parameters": "",
            "Returns": ""
        }
    },
    "plasmaextractor": {
        "getStatus": {
            "Name": "getStatus()",
            "Description": "     Returns the current status of the plasma extractor",
            "Parameters": "",
            "Returns": "<tr><td> status</td><td>integer</td><td> The status of the plasma extractor can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)</td></tr>"
        },
        "getRemainingTime": {
            "Name": "getRemainingTime()",
            "Description": "     Returns the remaining time of the current batch extraction process.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getPlasmaPools": {
            "Name": "getPlasmaPools()",
            "Description": "     Returns the list of available plasma pools",
            "Parameters": "",
            "Returns": "<tr><td> pool</td><td>table</td><td> A list of tables composed with {[int] oreId, [float] available, [float] maximum);</td></tr>"
        },
        "onStarted": {
            "Name": "onStarted",
            "Description": "     Emitted when the plasma extractor started a new extraction process",
            "Parameters": "",
            "Returns": ""
        },
        "onCompleted": {
            "Name": "onCompleted",
            "Description": "    Emitted when the plasma extractor complete a batch",
            "Parameters": "",
            "Returns": ""
        },
        "onStatusChanged": {
            "Name": "onStatusChanged",
            "Description": "     Emitted when the plasma extractor status is changed",
            "Parameters": "<tr><td> status </td><td>integer</td><td> The status of the plasma extractor can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)</td></tr>",
            "Returns": ""
        },
        "onStopped": {
            "Name": "onStopped",
            "Description": "     Emitted when the plasma extractor stopped the extraction process",
            "Parameters": "",
            "Returns": ""
        }
    },
    "player": {
        "getName": {
            "Name": "getName()",
            "Description": "     Returns the player name",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>string</td><td> The player name</td></tr>"
        },
        "getId": {
            "Name": "getId()",
            "Description": "     Return the ID of the player",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> The ID of the player</td></tr>"
        },
        "getMass": {
            "Name": "getMass()",
            "Description": "     Returns the player mass",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The mass of the player in kilograms</td></tr>"
        },
        "getNanopackMass": {
            "Name": "getNanopackMass()",
            "Description": "     Returns the player's nanopack content mass",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The player's nanopack content mass in kilograms</td></tr>"
        },
        "getNanopackVolume": {
            "Name": "getNanopackVolume()",
            "Description": "     Returns the player's nanopack content volume",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The player's nanopack content volume in liters</td></tr>"
        },
        "getNanopackMaxVolume": {
            "Name": "getNanopackMaxVolume()",
            "Description": "     Returns the player's nanopack maximum volume",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The player's nanopack maximum volume in liters</td></tr>"
        },
        "getOrgIds": {
            "Name": "getOrgIds()",
            "Description": "     Returns the list of organization IDs of the player",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The list of organization IDs</td></tr>"
        },
        "getPosition": {
            "Name": "getPosition()",
            "Description": "     Returns the position of the player, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The position in construct local coordinates</td></tr>"
        },
        "getWorldPosition": {
            "Name": "getWorldPosition()",
            "Description": "     Returns the position of the player, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The position in world coordinates</td></tr>"
        },
        "getHeadPosition": {
            "Name": "getHeadPosition()",
            "Description": "     Returns the position of the head of the player's character, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The position of the head in construct local coordinates</td></tr>"
        },
        "getWorldHeadPosition": {
            "Name": "getWorldHeadPosition()",
            "Description": "     Returns the position of the head of the player's character, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The position of the head in world coordinates</td></tr>"
        },
        "getVelocity": {
            "Name": "getVelocity()",
            "Description": "     Returns the velocity vector of the player, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The velocity vector in construct local coordinates</td></tr>"
        },
        "getWorldVelocity": {
            "Name": "getWorldVelocity()",
            "Description": "     Returns the velocity vector of the player, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The velocity vector in world coordinates</td></tr>"
        },
        "getAbsoluteVelocity": {
            "Name": "getAbsoluteVelocity()",
            "Description": "     Returns the absolute velocity vector of the player, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The velocity absolute vector in world coordinates</td></tr>"
        },
        "getForward": {
            "Name": "getForward()",
            "Description": "     Returns the forward direction vector of the player, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The forward direction vector in construct local coordinates</td></tr>"
        },
        "getRight": {
            "Name": "getRight()",
            "Description": "     Returns the right direction vector of the player, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The right direction vector in construct local coordinates</td></tr>"
        },
        "getUp": {
            "Name": "getUp()",
            "Description": "     Returns the up direction vector of the player, in construct local coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The up direction vector in construct local coordinates</td></tr>"
        },
        "getWorldForward": {
            "Name": "getWorldForward()",
            "Description": "     Returns the forward direction vector of the player, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The forward direction vector in world coordinates</td></tr>"
        },
        "getWorldRight": {
            "Name": "getWorldRight()",
            "Description": "     Returns the right direction vector of the player, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The right direction vector in world coordinates</td></tr>"
        },
        "getWorldUp": {
            "Name": "getWorldUp()",
            "Description": "     Returns the up direction vector of the player, in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> The up direction vector in world coordinates</td></tr>"
        },
        "getPlanet": {
            "Name": "getPlanet()",
            "Description": "     Returns the id of the planet the player is located on",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> The id of the planet, 0 if none</td></tr>"
        },
        "getParent": {
            "Name": "getParent()",
            "Description": "     Returns the identifier of the construct to which the player is parented",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> The id of the construct, 0 if none</td></tr>"
        },
        "isSeated": {
            "Name": "isSeated()",
            "Description": "     Checks if the player is seated",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the player is seated</td></tr>"
        },
        "getSeatId": {
            "Name": "getSeatId()",
            "Description": "     Returns the local id of the seat on which the player is sitting",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> The local id of the seat, or 0 is not seated</td></tr>"
        },
        "isParentedTo": {
            "Name": "isParentedTo(id)",
            "Description": "     Checks if the player is parented to the given construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The construct id</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the player is parented to the given construct</td></tr>"
        },
        "isSprinting": {
            "Name": "isSprinting()",
            "Description": "     Checks if the player is currently sprinting",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the player is sprinting</td></tr>"
        },
        "isJetpackOn": {
            "Name": "isJetpackOn()",
            "Description": "     Checks if the player's jetpack is on",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the player's jetpack is on</td></tr>"
        },
        "isHeadlightOn": {
            "Name": "isHeadlightOn()",
            "Description": "     Returns the state of the headlight of the player",
            "Parameters": "",
            "Returns": "<tr><td> 1</td><td>integer</td><td> if the player has his headlight on</td></tr>"
        },
        "setHeadlightOn": {
            "Name": "setHeadlightOn(state)",
            "Description": "     Set the state of the headlight of the player",
            "Parameters": "<tr><td> state </td><td>boolean</td><td> : True to turn on headlight</td></tr>",
            "Returns": ""
        },
        "freeze": {
            "Name": "freeze(state)",
            "Description": "     Freezes the player movements, liberating the associated movement keys to be used by the script. ",
            "Parameters": "<tr><td> state </td><td>boolean</td><td> 1 freeze the character, 0 unfreeze the character</td></tr>",
            "Returns": ""
        },
        "isFrozen": {
            "Name": "isFrozen()",
            "Description": "     Checks if the player movements are frozen",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the player is frozen, 0 otherwise</td></tr>"
        },
        "hasDRMAutorization": {
            "Name": "hasDRMAutorization()",
            "Description": "     Checks if the player has DRM autorization to the control unit",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the player has DRM autorization on the control unit</td></tr>"
        },
        "onParentChanged": {
            "Name": "onParentChanged",
            "Description": "     Emitted when the player parent change",
            "Parameters": "<tr><td> oldId </td><td>integer</td><td> The previous parent construct ID</td></tr><tr><td> newId </td><td>integer</td><td> The new parent construct ID</td></tr>",
            "Returns": ""
        }
    },
    "pressuretile": {
        "onPressed": {
            "Name": "onPressed",
            "Description": "     Emitted when the pressure tile is pressed",
            "Parameters": "",
            "Returns": ""
        },
        "onReleased": {
            "Name": "onReleased",
            "Description": "     Emitter when the pressure tile is released",
            "Parameters": "",
            "Returns": ""
        },
        "isDown": {
            "Name": "isDown()",
            "Description": "     Checks if the pressure tile is down",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "radar": {
        "getOperationalState": {
            "Name": "getOperationalState()",
            "Description": "     Returns 1 if the radar is not broken, works in the current environment and is not used by another control unit",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> 1 if the radar is operational, otherwise: 0 = broken, -1 = bad environment, -2 = obstructed, -3 = already in use</td></tr>"
        },
        "getRange": {
            "Name": "getRange()",
            "Description": "     Returns the scan range of the radar",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The scan range</td></tr>"
        },
        "getIdentifyRanges": {
            "Name": "getIdentifyRanges()",
            "Description": "     Returns ranges to identify a target based on its core size",
            "Parameters": "",
            "Returns": "<tr><td> ranges</td><td>table</td><td> The list of float values for ranges in meters as { xsRange, sRange, mRange, lRange }</td></tr>"
        },
        "getConstructIds": {
            "Name": "getConstructIds()",
            "Description": "     Returns the list of construct IDs in the scan range",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getIdentifiedConstructIds": {
            "Name": "getIdentifiedConstructIds()",
            "Description": "     Returns the list of identified construct IDs",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getTargetId": {
            "Name": "getTargetId()",
            "Description": "     Returns the ID of the target construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getConstructDistance": {
            "Name": "getConstructDistance(id)",
            "Description": "     Returns the distance to the given construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "isConstructIdentified": {
            "Name": "isConstructIdentified(id)",
            "Description": "     Returns 1 if the given construct is identified",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "isConstructAbandoned": {
            "Name": "isConstructAbandoned(id)",
            "Description": "     Returns 1 if the given construct was abandoned",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getConstructCoreSize": {
            "Name": "getConstructCoreSize(id)",
            "Description": "     Returns the core size of the given construct",
            "Parameters": "",
            "Returns": "<tr><td> size</td><td>string</td><td> The core size name; can be 'XS', 'S', 'M', 'L', 'XL'</td></tr>"
        },
        "getThreatRateTo": {
            "Name": "getThreatRateTo(id)",
            "Description": "     Returns the threat rate your construct is for the given construct",
            "Parameters": "",
            "Returns": "<tr><td> threat</td><td>integer</td><td> The threat rate index (None = 1, Identified = 2, Threatened and identified = 3, Threatened = 4, Attacked = 5), can be -1 if the radar is not operational</td></tr>"
        },
        "getThreatRateFrom": {
            "Name": "getThreatRateFrom(id)",
            "Description": "     Returns the threat rate the given construct is for your construct",
            "Parameters": "",
            "Returns": "<tr><td> threat</td><td>string</td><td> The threat rate index (None = 1, Identified = 2, Threatened and identified = 3, Threatened = 4, Attacked = 5), can be -1 if the radar is not operational</td></tr>"
        },
        "hasMatchingTransponder": {
            "Name": "hasMatchingTransponder(id)",
            "Description": "     Returns whether the target has an active Transponder with matching tags",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getConstructOwnerEntity": {
            "Name": "getConstructOwnerEntity(id)",
            "Description": "     Returns a table with id of the owner entity (player or organization) of the given construct, if in range and if active transponder tags match for owned dynamic constructs.",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> entity</td><td>table</td><td> A table with fields {[int] id, [bool] isOrganization} describing the owner. Use system.getPlayerName(id) and system.getOrganization(id) to retrieve info about it</td></tr>"
        },
        "getConstructSize": {
            "Name": "getConstructSize(id)",
            "Description": "     Return the size of the bounding box of the given construct, if in range",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getConstructKind": {
            "Name": "getConstructKind(id)",
            "Description": "     Return the kind of the given construct",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> kind</td><td>integer</td><td> The kind index of the construct (Universe = 1, Planet = 2,Asteroid = 3,Static = 4,Dynamic = 5,Space = 6,Alien = 7)</td></tr>"
        },
        "getConstructPos": {
            "Name": "getConstructPos(id)",
            "Description": "     Returns the position of the given construct in construct local coordinates, if active transponder tags match for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getConstructWorldPos": {
            "Name": "getConstructWorldPos(id)",
            "Description": "      Returns the position of the given construct in world coordinates, if in range and if active transponder tags match for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getConstructVelocity": {
            "Name": "getConstructVelocity(id)",
            "Description": "     Returns the velocity vector of the given construct in construct local coordinates, if identified and if active transponder tags match for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getConstructWorldVelocity": {
            "Name": "getConstructWorldVelocity(id)",
            "Description": "     Returns the velocity vector of the given construct in world coordinates, if identified and if active transponder tags match for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getConstructMass": {
            "Name": "getConstructMass(id)",
            "Description": "     Returns the mass of the given construct, if identified for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> mass</td><td>number</td><td> The mass of the construct in kilograms</td></tr>"
        },
        "getConstructName": {
            "Name": "getConstructName(id)",
            "Description": "     Return the name of the given construct, if defined",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getConstructInfos": {
            "Name": "getConstructInfos(id)",
            "Description": "     Returns a table of working elements on the given construction, if identified for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> info</td><td>table</td><td> A table with fields : {[float] weapons, [float] radars, [float] antiGravity, [float] atmoEngines, [float] spaceEngines, [float] rocketEngines} with values between 0.0 and 1.0. Exceptionally antiGravity and rocketEngines are always 1.0 if present, even if broken</td></tr>"
        },
        "getConstructSpeed": {
            "Name": "getConstructSpeed(id)",
            "Description": "     Returns the speed of the given construct, if identified for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> speed</td><td>number</td><td> The speed of the construct relative to the universe in meters per second</td></tr>"
        },
        "getConstructAngularSpeed": {
            "Name": "getConstructAngularSpeed(id)",
            "Description": "     Returns the angular speed of the given construct to your construct, if identified for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> speed</td><td>number</td><td> The angular speed of the construct relative to our construct in radians per second</td></tr>"
        },
        "getConstructRadialSpeed": {
            "Name": "getConstructRadialSpeed(id)",
            "Description": "     Returns the radial speed of the given construct to your construct, if identified for owned dynamic constructs",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": "<tr><td> speed</td><td>number</td><td> The radial speed of the construct relative to our construct in meters per second</td></tr>"
        },
        "onEnter": {
            "Name": "onEnter",
            "Description": "     Emitted when a Construct enters the scan range of the radar",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": ""
        },
        "onLeave": {
            "Name": "onLeave",
            "Description": "     Emitted when a construct leaves the range of the radar",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": ""
        },
        "onIdentified": {
            "Name": "onIdentified",
            "Description": "     Emitted when a construct is identified",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the construct</td></tr>",
            "Returns": ""
        }
    },
    "receiver": {
        "onReceived": {
            "Name": "onReceived",
            "Description": "     Emitted when a message is received on any channel defined on the element",
            "Parameters": "<tr><td> channel </td><td>string</td><td> The channel; can be used as a filter</td></tr><tr><td> message </td><td>string</td><td> The message received</td></tr>",
            "Returns": ""
        },
        "getRange": {
            "Name": "getRange()",
            "Description": "     Returns the receiver range",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "hasChannel": {
            "Name": "hasChannel(channel)",
            "Description": "     Checks if the given channel exists in the receiver channels list",
            "Parameters": "<tr><td> channel </td><td>string</td><td> The channels list as Lua </td><td>table</td><td></td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setChannelList": {
            "Name": "setChannelList(channels)",
            "Description": "     Set the channels list",
            "Parameters": "<tr><td> channels </td><td>table</td><td> The channels list as Lua </td><td>table</td><td></td></tr>",
            "Returns": "<tr><td> 1</td><td>integer</td><td> if the channels list has been successfully set</td></tr>"
        },
        "getChannelList": {
            "Name": "getChannelList()",
            "Description": "    Returns the channels list",
            "Parameters": "",
            "Returns": "<tr><td> channels</td><td>table</td><td> The channels list as Lua table</td></tr>"
        }
    },
    "screenunit": {
        "onMouseDown": {
            "Name": "onMouseDown",
            "Description": "     Emitted when the player starts a click on the screen",
            "Parameters": "<tr><td> x </td><td>number</td><td> X-coordinate of the click in percentage (between 0 and 1) of the screen width</td></tr><tr><td> y </td><td>number</td><td> Y-coordinate of the click in percentage (between 0 and 1) the screen height</td></tr>",
            "Returns": ""
        },
        "onMouseUp": {
            "Name": "onMouseUp",
            "Description": "     Emitted when the player releases a click on the screen",
            "Parameters": "<tr><td> x </td><td>number</td><td> X-coordinate of the click in percentage (between 0 and 1) of the screen width</td></tr><tr><td> y </td><td>number</td><td> Y-coordinate of the click in percentage (between 0 and 1) the screen height</td></tr>",
            "Returns": ""
        },
        "onOutputChanged": {
            "Name": "onOutputChanged",
            "Description": "     Emitted when the output of the screen is changed",
            "Parameters": "<tr><td> output </td><td>string</td><td> The output </td><td>string</td><td> of the screen</td></tr>",
            "Returns": ""
        },
        "activate": {
            "Name": "activate()",
            "Description": "     Switch on the screen",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Switch off the screen",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the screen is on",
            "Parameters": "",
            "Returns": "<tr><td> 1</td><td>integer</td><td> if the screen is on</td></tr>"
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the screen",
            "Parameters": "",
            "Returns": ""
        },
        "addText": {
            "Name": "addText(x,y,fontSize,text)",
            "Description": "     Displays the given text at the given coordinates in the screen, and returns an ID to move it later",
            "Parameters": "<tr><td> x </td><td>number</td><td> Horizontal position, as a percentage (between 0 and 100) of the screen width</td></tr><tr><td> y </td><td>number</td><td> Vertical position, as a percentage (between 0 and 100) of the screen height</td></tr><tr><td> fontSize </td><td>number</td><td> Text font size, as a percentage of the screen width</td></tr><tr><td> text </td><td>string</td><td> The text to display</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setCenteredText": {
            "Name": "setCenteredText(text)",
            "Description": "     Displays the given text centered in the screen with a font to maximize its visibility",
            "Parameters": "<tr><td> text </td><td>string</td><td> The text to display</td></tr>",
            "Returns": ""
        },
        "setHTML": {
            "Name": "setHTML(html)",
            "Description": "     Set the whole screen HTML content (overrides anything already set)",
            "Parameters": "<tr><td> html </td><td>string</td><td> The HTML content to display</td></tr>",
            "Returns": ""
        },
        "setRenderScript": {
            "Name": "setRenderScript(script)",
            "Description": "     Set the screen render script, switching the screen to native rendering mode",
            "Parameters": "<tr><td> script </td><td>string</td><td> The Lua render script</td></tr>",
            "Returns": ""
        },
        "setScriptInput": {
            "Name": "setScriptInput(input)",
            "Description": "     Defines the input of the screen rendering script, which will be automatically defined during the execution of Lua",
            "Parameters": "<tr><td> input </td><td>string</td><td> A </td><td>string</td><td> that can be retrieved by calling getInput in a render script</td></tr>",
            "Returns": ""
        },
        "clearScriptOutput": {
            "Name": "clearScriptOutput()",
            "Description": "     Set the screen render script output to the empty string",
            "Parameters": "",
            "Returns": ""
        },
        "getScriptOutput": {
            "Name": "getScriptOutput()",
            "Description": "     Get the screen render script output",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>string</td><td> The contents of the last render script setOutput call, or an empty string</td></tr>"
        },
        "addContent": {
            "Name": "addContent(x,y,html)",
            "Description": "     Displays the given HTML content at the given coordinates in the screen, and returns an ID to move it later",
            "Parameters": "<tr><td> x </td><td>number</td><td> Horizontal position, as a percentage (between 0 and 100) of the screen width</td></tr><tr><td> y </td><td>number</td><td> Vertical position, as a percentage (between 0 and 100) of the screen height</td></tr><tr><td> html </td><td>string</td><td> The HTML content to display, which can contain SVG html elements to make drawings</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setSVG": {
            "Name": "setSVG(svg)",
            "Description": "     Displays SVG code (anything that fits within a <svg> section), which overrides any preexisting content",
            "Parameters": "<tr><td> svg </td><td>string</td><td> The SVG content to display, which fits inside a 1920x1080 canvas</td></tr>",
            "Returns": ""
        },
        "resetContent": {
            "Name": "resetContent(id,html)",
            "Description": "     Update the html element with the given ID (returned by addContent) with a new HTML content",
            "Parameters": "<tr><td> id </td><td>integer</td><td> An </td><td>integer</td><td> ID that is used to identify the html element in the screen. Methods such as addContent return the ID that you can store to use later here</td></tr><tr><td> html </td><td>string</td><td> The HTML content to display, which can contain SVG html elements to make drawings</td></tr>",
            "Returns": ""
        },
        "deleteContent": {
            "Name": "deleteContent(id)",
            "Description": "     Delete the html element with the given ID (returned by addContent)",
            "Parameters": "<tr><td> id </td><td>integer</td><td> An </td><td>integer</td><td> ID that is used to identify the html element in the screen. Methods such as addContent return the id that you can store to use later here</td></tr>",
            "Returns": ""
        },
        "showContent": {
            "Name": "showContent(id,state)",
            "Description": "     Update the visibility of the html element with the given ID (returned by addContent)",
            "Parameters": "<tr><td> id </td><td>integer</td><td> An </td><td>integer</td><td> ID that is used to identify the html element in the screen. Methods such as addContent return the ID that you can store to use later here</td></tr><tr><td> state </td><td>boolean</td><td> true to show the content, false to hide</td></tr>",
            "Returns": ""
        },
        "moveContent": {
            "Name": "moveContent(id,x,y)",
            "Description": "     Move the html element with the given id (returned by addContent) to a new position in the screen",
            "Parameters": "<tr><td> id </td><td>integer</td><td> An </td><td>integer</td><td> id that is used to identify the html element in the screen. Methods such as addContent return the ID that you can store to use later here</td></tr><tr><td> x </td><td>number</td><td> Horizontal position, as a percentage (between 0 and 100) of the screen width</td></tr><tr><td> y </td><td>number</td><td> Vertical position, as a percentage (between 0 and 100) of the screen height</td></tr>",
            "Returns": ""
        },
        "getMouseX": {
            "Name": "getMouseX()",
            "Description": "     Returns the x-coordinate of the position point at in the screen",
            "Parameters": "",
            "Returns": "<tr><td> x</td><td>number</td><td> The x-position as a percentage (between 0 and 1) of screen width; -1 if nothing is point at</td></tr>"
        },
        "getMouseY": {
            "Name": "getMouseY()",
            "Description": "     Returns the y-coordinate of the position point at in the screen",
            "Parameters": "",
            "Returns": "<tr><td> y</td><td>number</td><td> The y-position as a percentage (between 0 and 1) of screen height; -1 if nothing is point at</td></tr>"
        },
        "getMouseState": {
            "Name": "getMouseState()",
            "Description": "     Returns the state of the mouse click",
            "Parameters": "",
            "Returns": "<tr><td> 1</td><td>integer</td><td> if the mouse is pressed, otherwise 0</td></tr>"
        },
        "clear": {
            "Name": "clear()",
            "Description": "     Clear the screen",
            "Parameters": "",
            "Returns": ""
        }
    },
    "shieldgenerator": {
        "onToggled": {
            "Name": "onToggled",
            "Description": "     Emitted when we started or stopped the shield generator",
            "Parameters": "<tr><td> active </td><td>integer</td><td> 1 if the element was activated, 0 otherwise</td></tr>",
            "Returns": ""
        },
        "onAbsorbed": {
            "Name": "onAbsorbed",
            "Description": "     Emitted when the shield absorbed incoming damage",
            "Parameters": "<tr><td> hitpoints </td><td>number</td><td> Damage the shield absorbed</td></tr><tr><td> rawHitpoints </td><td>number</td><td> Total damage without taking resistances into account</td></tr>",
            "Returns": ""
        },
        "onVenting": {
            "Name": "onVenting",
            "Description": "     Emitted when venting started, stopped or restored some hitpoints",
            "Parameters": "<tr><td> active </td><td>integer</td><td> 1 when venting is active, 0 otherwise</td></tr><tr><td> restoredHitpoints </td><td>number</td><td> Hitpoints restored since the last venting step</td></tr>",
            "Returns": ""
        },
        "onDown": {
            "Name": "onDown",
            "Description": "     Emitted when the shield hit points reached 0 due to damage",
            "Parameters": "",
            "Returns": ""
        },
        "onRestored": {
            "Name": "onRestored",
            "Description": "     Emitted when the shield hit points were fully restored",
            "Parameters": "",
            "Returns": ""
        },
        "activate": {
            "Name": "activate()",
            "Description": "     Activate the shield",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Deactivate the shield",
            "Parameters": "",
            "Returns": ""
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the shield",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Returns the activation state of the shield",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getShieldHitpoints": {
            "Name": "getShieldHitpoints()",
            "Description": "     Returns the current hit points of the shield",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxShieldHitpoints": {
            "Name": "getMaxShieldHitpoints()",
            "Description": "     Returns the maximal hit points of the shield",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "startVenting": {
            "Name": "startVenting()",
            "Description": "     Activate shield venting to restore hit points",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> 1 if venting started, 0 if an error occurred</td></tr>"
        },
        "stopVenting": {
            "Name": "stopVenting()",
            "Description": "     Stop shield venting",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> 1 if venting stopped, 0 if an error occurred</td></tr>"
        },
        "isVenting": {
            "Name": "isVenting()",
            "Description": "     Check whether venting is in progress",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> 1 if venting is ongoing, 0 otherwise</td></tr>"
        },
        "getVentingCooldown": {
            "Name": "getVentingCooldown()",
            "Description": "     Returns time after which venting is possible again",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Remaining seconds of the venting cooldown</td></tr>"
        },
        "getVentingMaxCooldown": {
            "Name": "getVentingMaxCooldown()",
            "Description": "     Returns maximal cooldown between venting",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Maximal seconds of the venting cooldown</td></tr>"
        },
        "getResistances": {
            "Name": "getResistances()",
            "Description": "     Returns distribution of resistance pool over resistance types",
            "Parameters": "",
            "Returns": "<tr><td> resistances</td><td>table</td><td> Resistance to damage type {antimatter, electromagnetic, kinetic, thermic}</td></tr>"
        },
        "setResistances": {
            "Name": "setResistances(antimatter,electromagnetic,kinetic,thermic)",
            "Description": "     Distribute the resistance pool according to damage type",
            "Parameters": "<tr><td> antimatter </td><td>number</td><td> Antimatter damage resistance</td></tr><tr><td> electromagnetic </td><td>number</td><td> Electromagnetic damage resistance</td></tr><tr><td> kinetic </td><td>number</td><td> Kinetic damage resistance</td></tr><tr><td> thermic </td><td>number</td><td> Thermic damage resistance</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getResistancesCooldown": {
            "Name": "getResistancesCooldown()",
            "Description": "     Returns time after which adjusting resistances is possible again",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistancesMaxCooldown": {
            "Name": "getResistancesMaxCooldown()",
            "Description": "     Returns maximal cooldown between adjusting resistances",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistancesPool": {
            "Name": "getResistancesPool()",
            "Description": "     Returns total resistance pool that may be distributed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getResistancesRemaining": {
            "Name": "getResistancesRemaining()",
            "Description": "     Returns the remaining amount of the resistance pool that can be distributed",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getStressRatio": {
            "Name": "getStressRatio()",
            "Description": "     Returns ratio per damage type of recent weapon impacts after applying resistance",
            "Parameters": "",
            "Returns": "<tr><td> stress</td><td>table</td><td> Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}</td></tr>"
        },
        "getStressRatioRaw": {
            "Name": "getStressRatioRaw()",
            "Description": "     Returns ratio per damage type of recent weapon impacts without resistance",
            "Parameters": "",
            "Returns": "<tr><td> stress</td><td>table</td><td> Stress ratio due to damage type {antimatter, electromagnetic, kinetic, thermic}</td></tr>"
        },
        "getStressHitpoints": {
            "Name": "getStressHitpoints()",
            "Description": "     Returns stress, that is the total hit points of recent weapon impacts after applying resistance",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getStressHitpointsRaw": {
            "Name": "getStressHitpointsRaw()",
            "Description": "     Returns stress, that is the total hit points of recent weapon impacts without resistance",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        }
    },
    "spaceminingunit": {
        "getState": {
            "Name": "getState()",
            "Description": "     Returns the current state of the space mining unit",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> The status of the space mining unit can be (Stopped = 1, Running = 2, Jammed output full = 3, Jammed no output container = 4)</td></tr>"
        },
        "getRemainingTime": {
            "Name": "getRemainingTime()",
            "Description": "     Returns the remaining time of the current batch extraction process.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getActiveOre": {
            "Name": "getActiveOre()",
            "Description": "     Returns the item ID of the currently selected ore.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getOrePools": {
            "Name": "getOrePools()",
            "Description": "     Returns the list of available ore pools",
            "Parameters": "",
            "Returns": "<tr><td> pool</td><td>table</td><td> A list of tables composed with {[int] oreId, [float] available, [float] maximum);</td></tr>"
        },
        "getBaseRate": {
            "Name": "getBaseRate()",
            "Description": "     Returns the base production rate of the space mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getEfficiency": {
            "Name": "getEfficiency()",
            "Description": "     Returns the efficiency rate of the space mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCalibrationRate": {
            "Name": "getCalibrationRate()",
            "Description": "     Returns the calibration rate of the space mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getOptimalRate": {
            "Name": "getOptimalRate()",
            "Description": "     Returns the optimal calibration rate of the space mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getProductionRate": {
            "Name": "getProductionRate()",
            "Description": "     Returns the current production rate of the space mining unit.",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "onStarted": {
            "Name": "onStarted",
            "Description": "     Emitted when the space mining unit started a new extraction process.",
            "Parameters": "<tr><td> oreId </td><td>number</td><td> The item ID of the ore mined during the extraction process</td></tr>",
            "Returns": ""
        },
        "onCompleted": {
            "Name": "onCompleted",
            "Description": "     Emitted when the space mining unit complete a batch.",
            "Parameters": "<tr><td> oreId </td><td>number</td><td> The item ID of the ore mined during the extraction process</td></tr><tr><td> amount </td><td>number</td><td> Amount of ore mined</td></tr>",
            "Returns": ""
        },
        "onStatusChanged": {
            "Name": "onStatusChanged",
            "Description": "     Emitted when the space mining unit status is changed.",
            "Parameters": "<tr><td> status </td><td>integer</td><td> The status of the space mining unit can be</td></tr>",
            "Returns": ""
        },
        "onStopped": {
            "Name": "onStopped",
            "Description": "     Emitted when the space mining unit stopped the extraction process.",
            "Parameters": "",
            "Returns": ""
        }
    },
    "surfaceengine": {
        "getDistance": {
            "Name": "getDistance()",
            "Description": "     Returns the distance to the first object detected in the direction of the thrust",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxDistance": {
            "Name": "getMaxDistance()",
            "Description": "     Returns the maximum functional distance from the ground",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        }
    },
    "system": {
        "onActionStart": {
            "Name": "onActionStart",
            "Description": "     Emitted when an action starts",
            "Parameters": "<tr><td> action </td><td>string</td><td> The action name, represented as a </td><td>string</td><td> taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)</td></tr>",
            "Returns": ""
        },
        "onActionStop": {
            "Name": "onActionStop",
            "Description": "     Emitted when an action stops",
            "Parameters": "<tr><td> action </td><td>string</td><td> The action name, represented as a </td><td>string</td><td> taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)</td></tr>",
            "Returns": ""
        },
        "onActionLoop": {
            "Name": "onActionLoop",
            "Description": "     Emitted at each update as long as the action is maintained",
            "Parameters": "<tr><td> action </td><td>string</td><td> The action name, represented as a </td><td>string</td><td> taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)</td></tr>",
            "Returns": ""
        },
        "onUpdate": {
            "Name": "onUpdate",
            "Description": "     Game update event. This is equivalent to a timer set at 0 seconds, as updates will go as fast as the FPS can go",
            "Parameters": "",
            "Returns": ""
        },
        "onFlush": {
            "Name": "onFlush",
            "Description": "     Physics update. Do not use to put anything else by a call to updateICC on your Control Unit, as many functions are",
            "Parameters": "",
            "Returns": ""
        },
        "onInputText": {
            "Name": "onInputText",
            "Description": "     A new message has been entered in the Lua tab of the chat, acting like a command line interface",
            "Parameters": "<tr><td> text </td><td>string</td><td> The message entered</td></tr>",
            "Returns": ""
        },
        "onCameraChanged": {
            "Name": "onCameraChanged",
            "Description": "     Emitted when the player changes the camera mode.",
            "Parameters": "<tr><td> mode </td><td>integer</td><td> The camera mode, represented by an </td><td>integer</td><td> (First Person View = 1, Look Around Construct View = 2, Follow Construct View = 3)</td></tr>",
            "Returns": ""
        },
        "getActionKeyName": {
            "Name": "getActionKeyName(actionName)",
            "Description": "     Return the currently key bound to the given action. Useful to display tips.",
            "Parameters": "<tr><td> actionName </td><td>string</td><td> The action name, represented as a </td><td>string</td><td> taken among the set of predefined Lua-available actions (you can check the drop down list to see what is available)</td></tr>",
            "Returns": "<tr><td> value</td><td>string</td><td> The key associated to the given action name</td></tr>"
        },
        "showScreen": {
            "Name": "showScreen(bool)",
            "Description": "     Control the display of the Control Unit custom screen, where you can define customized display information in HTML. ",
            "Parameters": "<tr><td> bool </td><td>boolean</td><td> True to show the screen, false to hide the screen</td></tr>",
            "Returns": ""
        },
        "setScreen": {
            "Name": "setScreen(content)",
            "Description": "     Set the content of the Control Unit custom screen with some HTML code. ",
            "Parameters": "<tr><td> content </td><td>string</td><td> The HTML content you want to display on the screen widget. You can also use SVG here to make drawings.</td></tr>",
            "Returns": ""
        },
        "createWidgetPanel": {
            "Name": "createWidgetPanel(label)",
            "Description": "     Create an empty panel. ",
            "Parameters": "<tr><td> label </td><td>string</td><td> The title of the panel</td></tr>",
            "Returns": "<tr><td> value</td><td>string</td><td> The panel ID, or \"\" on failure</td></tr>"
        },
        "destroyWidgetPanel": {
            "Name": "destroyWidgetPanel(panelId)",
            "Description": "     Destroy the panel. ",
            "Parameters": "<tr><td> panelId </td><td>string</td><td> The panel ID</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 on success, 0 on failure.</td></tr>"
        },
        "createWidget": {
            "Name": "createWidget(panelId, type)",
            "Description": "     Create an empty widget and add it to a panel. ",
            "Parameters": "<tr><td> panelId </td><td>string</td><td> The panel ID</td></tr><tr><td> type </td><td>string</td><td> Widget type, determining how it will display data attached to ID</td></tr>",
            "Returns": "<tr><td> value</td><td>string</td><td> The widget ID, or \"\" on failure.</td></tr>"
        },
        "destroyWidget": {
            "Name": "destroyWidget(widgetId)",
            "Description": "     Destroy the widget. ",
            "Parameters": "<tr><td> widgetId </td><td>string</td><td> The widget ID</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 on success, 0 on failure.</td></tr>"
        },
        "createData": {
            "Name": "createData(dataJson)",
            "Description": "     Create data. ",
            "Parameters": "<tr><td> dataJson </td><td>string</td><td> The data fields as JSON</td></tr>",
            "Returns": "<tr><td> value</td><td>string</td><td> The data ID, or \"\" on failure.</td></tr>"
        },
        "destroyData": {
            "Name": "destroyData(dataId)",
            "Description": "     Destroy the data. ",
            "Parameters": "<tr><td> dataId </td><td>string</td><td> The data ID</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 on success, 0 on failure.</td></tr>"
        },
        "updateData": {
            "Name": "updateData(dataId, dataJson)",
            "Description": "     Update JSON associated to data. ",
            "Parameters": "<tr><td> dataId </td><td>string</td><td> The data ID</td></tr><tr><td> dataJson </td><td>string</td><td> The data fields as JSON</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 on success, 0 on failure.</td></tr>"
        },
        "addDataToWidget": {
            "Name": "addDataToWidget(dataId, widgetId)",
            "Description": "     Add data to widget. ",
            "Parameters": "<tr><td> dataId </td><td>string</td><td> The data ID</td></tr><tr><td> widgetId </td><td>string</td><td> The widget ID</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 on success, 0 on failure.</td></tr>"
        },
        "removeDataFromWidget": {
            "Name": "removeDataFromWidget(dataId, widgetId)",
            "Description": "     Remove data from widget. ",
            "Parameters": "<tr><td> dataId </td><td>string</td><td> The data ID</td></tr><tr><td> widgetId </td><td>string</td><td> The widget ID</td></tr>",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 on success, 0 on failure.</td></tr>"
        },
        "getMouseWheel": {
            "Name": "getMouseWheel()",
            "Description": "     Return the current value of the mouse wheel",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the mouse wheel</td></tr>"
        },
        "getMouseDeltaX": {
            "Name": "getMouseDeltaX()",
            "Description": "     Return the current value of the mouse delta X",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the mouse delta X</td></tr>"
        },
        "getMouseDeltaY": {
            "Name": "getMouseDeltaY()",
            "Description": "     Return the current value of the mouse delta Y",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the mouse delta Y</td></tr>"
        },
        "getMousePosX": {
            "Name": "getMousePosX()",
            "Description": "     Return the current value of the mouse pos X",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the mouse pos X</td></tr>"
        },
        "getMousePosY": {
            "Name": "getMousePosY()",
            "Description": "     Return the current value of the mouse pos Y",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the mouse pos Y</td></tr>"
        },
        "getMouseSensitivity": {
            "Name": "getMouseSensitivity()",
            "Description": "     Return the value of mouse sensitivity game setting",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Sensitivity setting value</td></tr>"
        },
        "getScreenHeight": {
            "Name": "getScreenHeight()",
            "Description": "     Return the current value of the screen height",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> The current value of the screen height</td></tr>"
        },
        "getScreenWidth": {
            "Name": "getScreenWidth()",
            "Description": "     Return the current value of the screen width",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> The current value of the screen width</td></tr>"
        },
        "getCameraHorizontalFov": {
            "Name": "getCameraHorizontalFov()",
            "Description": "     Return the current value of the player's horizontal field of view",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the player's horizontal field of view</td></tr>"
        },
        "getCameraVerticalFov": {
            "Name": "getCameraVerticalFov()",
            "Description": "     Return the current value of the player's vertical field of view",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the player's vertical field of view</td></tr>"
        },
        "getCameraMode": {
            "Name": "getCameraMode()",
            "Description": "     Returns the active camera mode.",
            "Parameters": "",
            "Returns": "<tr><td> mode</td><td>integer</td><td> 1: First Person View, 2: Look Around Construct View, 3: Follow Construct View</td></tr>"
        },
        "isFirstPerson": {
            "Name": "isFirstPerson()",
            "Description": "     Checks if the active camera is in first person view.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if the camera is in first person view.</td></tr>"
        },
        "getCameraPos": {
            "Name": "getCameraPos()",
            "Description": "     Returns the position of the camera, in construct local coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera position in construct local coordinates.</td></tr>"
        },
        "getCameraWorldPos": {
            "Name": "getCameraWorldPos()",
            "Description": "     Returns the position of the camera, in world coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera position in world coordinates.</td></tr>"
        },
        "getCameraWorldForward": {
            "Name": "getCameraWorldForward()",
            "Description": "     Returns the forward direction vector of the active camera, in world coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera forward direction vector in world coordinates.</td></tr>"
        },
        "getCameraWorldRight": {
            "Name": "getCameraWorldRight()",
            "Description": "     Returns the right direction vector of the active camera, in world coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera right direction vector in world coordinates.</td></tr>"
        },
        "getCameraWorldUp": {
            "Name": "getCameraWorldUp()",
            "Description": "     Returns the up direction vector of the active camera, in world coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera up direction vector in world coordinates.</td></tr>"
        },
        "getCameraForward": {
            "Name": "getCameraForward()",
            "Description": "     Returns the forward direction vector of the active camera, in construct local coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera forward direction vector in construct local coordinates.</td></tr>"
        },
        "getCameraRight": {
            "Name": "getCameraRight()",
            "Description": "     Returns the right direction vector of the active camera, in construct local coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera right direction vector in construct local coordinates.</td></tr>"
        },
        "getCameraUp": {
            "Name": "getCameraUp()",
            "Description": "     Returns the up direction vector of the active camera, in construct local coordinates.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>table</td><td> Camera up direction vector in construct local coordinates.</td></tr>"
        },
        "getThrottleInputFromMouseWheel": {
            "Name": "getThrottleInputFromMouseWheel()",
            "Description": "     Return the current value of the mouse wheel (for the throttle speedUp/speedDown action)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current input</td></tr>"
        },
        "getControlDeviceForwardInput": {
            "Name": "getControlDeviceForwardInput()",
            "Description": "     Return the mouse input for the ship control action (forward/backward)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current input</td></tr>"
        },
        "getControlDeviceYawInput": {
            "Name": "getControlDeviceYawInput()",
            "Description": "     Return the mouse input for the ship control action  (yaw right/left)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current input</td></tr>"
        },
        "getControlDeviceLeftRightInput": {
            "Name": "getControlDeviceLeftRightInput()",
            "Description": "     Return the mouse input for the ship control action  (right/left)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The current value of the mouse delta Y</td></tr>"
        },
        "lockView": {
            "Name": "lockView(state)",
            "Description": "     Lock or unlock the mouse free look.",
            "Parameters": "<tr><td> state </td><td>boolean</td><td> true to lock and false to unlock</td></tr>",
            "Returns": ""
        },
        "isViewLocked": {
            "Name": "isViewLocked()",
            "Description": "     Return the lock state of the mouse free look",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 when locked and 0 when unlocked</td></tr>"
        },
        "getArkTime": {
            "Name": "getArkTime()",
            "Description": "     Return the current time since the arrival of the Arkship on September 30th, 2017",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Time in seconds</td></tr>"
        },
        "getUtcTime": {
            "Name": "getUtcTime()",
            "Description": "     Return the current time since January 1st, 1970.",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Time in seconds</td></tr>"
        },
        "getUtcOffset": {
            "Name": "getUtcOffset()",
            "Description": "     Return the time offset between local timezone and UTC",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> Time in seconds</td></tr>"
        },
        "getLocale": {
            "Name": "getLocale()",
            "Description": "     Return the locale in which the game is currently running",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>string</td><td> The locale, currently one of \"en-US\", \"fr-FR\", or \"de-DE\"</td></tr>"
        },
        "getActionUpdateDeltaTime": {
            "Name": "getActionUpdateDeltaTime()",
            "Description": "     Return delta time of action updates (to use in ActionLoop)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>number</td><td> The delta time in seconds</td></tr>"
        },
        "getPlayerName": {
            "Name": "getPlayerName(id)",
            "Description": "     Return the name of the given player, if in range of visibility or broadcasted by a transponder",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the player</td></tr>",
            "Returns": "<tr><td> value</td><td>string</td><td> The name of the player</td></tr>"
        },
        "getPlayerWorldPos": {
            "Name": "getPlayerWorldPos(id)",
            "Description": "     Return the world position of the given player, if in range of visibility",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the player</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> The coordinates of the player in world coordinates</td></tr>"
        },
        "getItem": {
            "Name": "getItem(id)",
            "Description": "     Return the item table corresponding to the given item ID.",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the item</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> An item table with fields: {[int] id, [string] name, [string] displayName, [string] locDisplayName, [string] displayNameWithSize, [string] locDisplayNameWithSize, [string] description, [string] locDescription, [string] type, [number] unitMass, [number] unitVolume, [integer] tier, [string] scale, [string] iconPath, [table] schematics, [table] products}</td></tr>"
        },
        "getRecipes": {
            "Name": "getRecipes(itemId)",
            "Description": "     Returns a list of recipes producing the given item from its id.",
            "Parameters": "<tr><td> itemId </td><td>integer</td><td> The ID of the item</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> A list of recipe table with field: {[int] id, [int] tier,[double] time, [bool] nanocraftable, [table] products:{{[int] id, [double] quantity},...}, [table] ingredients:{{[int] id, [double] quantity},...}}</td></tr>"
        },
        "getOrganization": {
            "Name": "getOrganization(id)",
            "Description": "     Returns the corresping organization to the given organization id, if known, e.g. broadcasted by a transponder",
            "Parameters": "<tr><td> id </td><td>integer</td><td> The ID of the organization</td></tr>",
            "Returns": "<tr><td> value</td><td>table</td><td> A table containing information about the given organization {[string] name, [string] tag}</td></tr>"
        },
        "getWaypointFromPlayerPos": {
            "Name": "getWaypointFromPlayerPos()",
            "Description": "     Return the player's world position as a waypoint string, starting with '::pos' (only in explicit runs)",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>string</td><td> The waypoint as a string</td></tr>"
        },
        "setWaypoint": {
            "Name": "setWaypoint(waypointStr,notify)",
            "Description": "     Set a waypoint at the destination described by the waypoint string, of the form '::pos{...}' (only in explicit runs)",
            "Parameters": "<tr><td> waypointStr </td><td>string</td><td> The waypoint as a </td><td>string</td><td></td></tr><tr><td> notify </td><td>boolean</td><td> (Optional) True to display a notification on waypoint change</td></tr>",
            "Returns": ""
        },
        "clearWaypoint": {
            "Name": "clearWaypoint(notify)",
            "Description": "     Clear the active destination waypoint. (only in explicit runs)'",
            "Parameters": "<tr><td> notify </td><td>boolean</td><td> (Optional) True to display a notification about the waypoint's clearing</td></tr>",
            "Returns": ""
        },
        "showHelper": {
            "Name": "showHelper(show)",
            "Description": "     Set the visibility of the helper top menu.",
            "Parameters": "<tr><td> show </td><td>boolean</td><td> True to show the top helper menu, false to hide the top helper menu</td></tr>",
            "Returns": ""
        },
        "playSound": {
            "Name": "playSound(filePath)",
            "Description": "     Play a sound file from your audio folder (located in \"My documents/NQ/DualUniverse/audio\"). Only one sound can be played at a time.",
            "Parameters": "<tr><td> filePath </td><td>string</td><td> Relative path to audio folder (.mp3, .wav)</td></tr>",
            "Returns": ""
        },
        "isPlayingSound": {
            "Name": "isPlayingSound()",
            "Description": "     Checks if a sound is playing",
            "Parameters": "",
            "Returns": "<tr><td> value</td><td>integer</td><td> 1 if a sound is playing</td></tr>"
        },
        "stopSound": {
            "Name": "stopSound()",
            "Description": "     Stop the current playing sound",
            "Parameters": "",
            "Returns": ""
        },
        "print": {
            "Name": "print(msg)",
            "Description": "     Print the given string in the Lua chat channel",
            "Parameters": "<tr><td> msg </td><td>string</td><td></td></tr>",
            "Returns": ""
        }
    },
    "telemeter": {
        "raycast": {
            "Name": "raycast()",
            "Description": "     Emits a raycast from the telemeter, returns a raycastHit object",
            "Parameters": "",
            "Returns": "<tr><td> hit</td><td>table</td><td> A table with fields : {[bool] hit, [float] distance, [vec3] point}</td></tr>"
        },
        "getRayOrigin": {
            "Name": "getRayOrigin()",
            "Description": "     Returns telemeter raycast origin in local construct coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getRayWorldOrigin": {
            "Name": "getRayWorldOrigin()",
            "Description": "     Returns telemeter raycast origin in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getRayAxis": {
            "Name": "getRayAxis()",
            "Description": "     Returns telemeter raycast axis in local construct coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getRayWorldAxis": {
            "Name": "getRayWorldAxis()",
            "Description": "     Returns telemeter raycast axis in world coordinates",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>table</td><td></td></tr>"
        },
        "getMaxDistance": {
            "Name": "getMaxDistance()",
            "Description": "     Returns the max distance from which an obstacle can be detected (default is 100m)",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        }
    },
    "transponder": {
        "activate": {
            "Name": "activate()",
            "Description": "     Activate the transponder",
            "Parameters": "",
            "Returns": ""
        },
        "deactivate": {
            "Name": "deactivate()",
            "Description": "     Deactivate the transponder",
            "Parameters": "",
            "Returns": ""
        },
        "toggle": {
            "Name": "toggle()",
            "Description": "     Toggle the state of the transponder",
            "Parameters": "",
            "Returns": ""
        },
        "isActive": {
            "Name": "isActive()",
            "Description": "     Checks if the transponder is active",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "setTags": {
            "Name": "setTags(tags)",
            "Description": "     Set the tags list with up to 8 entries. Returns 1 if the application was successful, 0 if the tag",
            "Parameters": "<tr><td> tags </td><td>table</td><td> List of up to 8 transponder tag </td><td>string</td><td>s</td></tr>",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getTags": {
            "Name": "getTags()",
            "Description": "     Returns the tag list",
            "Parameters": "",
            "Returns": "<tr><td> tags</td><td>table</td><td> List of up to 8 transponder tag strings</td></tr>"
        },
        "onToggled": {
            "Name": "onToggled",
            "Description": "     Emitted when the transponder is started or stopped",
            "Parameters": "<tr><td> active </td><td>integer</td><td> 1 if the element was activated, 0 otherwise</td></tr>",
            "Returns": ""
        }
    },
    "warpdrive": {
        "initiate": {
            "Name": "initiate()",
            "Description": "     Initiate the warp jump process",
            "Parameters": "",
            "Returns": ""
        },
        "getStatus": {
            "Name": "getStatus()",
            "Description": "     Returns the current status of the warp drive",
            "Parameters": "",
            "Returns": "<tr><td> status</td><td>integer</td><td> The current status of the warp drive (NoWarpDrive = 1, Broken = 2, Warping = 3, ParentWarping = 4, NotAnchored = 5, WarpCooldown = 6, PvPCooldown = 7, MovingChild = 8, NoContainer = 9, PlanetTooClose = 10, DestinationNotSet = 11, DestinationTooClose = 12, DestinationTooFar = 13, NotEnoughWarpCells = 14, Ready = 15)</td></tr>"
        },
        "getDistance": {
            "Name": "getDistance()",
            "Description": "     Returns the distance to the current warp destination",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getDestination": {
            "Name": "getDestination()",
            "Description": "     Returns the construct ID of the current warp destination",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getDestinationName": {
            "Name": "getDestinationName()",
            "Description": "     Returns the name of the current warp destination construct",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>string</td><td></td></tr>"
        },
        "getContainerId": {
            "Name": "getContainerId()",
            "Description": "     Returns the local id of the container linked to the warp drive",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getAvailableWarpCells": {
            "Name": "getAvailableWarpCells()",
            "Description": "     Returns the quantity of warp cells available in the linked container",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getRequiredWarpCells": {
            "Name": "getRequiredWarpCells()",
            "Description": "     Returns the quantity of warp cells required to warp to the warp destination set",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    },
    "weapon": {
        "onReload": {
            "Name": "onReload",
            "Description": "     Emitted when the weapon start reloading",
            "Parameters": "<tr><td> ammoId </td><td>integer</td><td> The item id of the ammo</td></tr>",
            "Returns": ""
        },
        "onReloaded": {
            "Name": "onReloaded",
            "Description": "     Emitted when the weapon has reloaded",
            "Parameters": "<tr><td> ammoId </td><td>integer</td><td> The item id of the ammo</td></tr>",
            "Returns": ""
        },
        "onMissed": {
            "Name": "onMissed",
            "Description": "     Emitted when the weapon has missed its target",
            "Parameters": "<tr><td> targetId </td><td>integer</td><td> The construct id of the target</td></tr>",
            "Returns": ""
        },
        "onDestroyed": {
            "Name": "onDestroyed",
            "Description": "     Emitted when the weapon target has been destroyed",
            "Parameters": "<tr><td> targetId </td><td>integer</td><td> The construct id of the target</td></tr>",
            "Returns": ""
        },
        "onElementDestroyed": {
            "Name": "onElementDestroyed",
            "Description": "     Emitted when an element on the weapon target has been destroyed",
            "Parameters": "<tr><td> targetId </td><td>integer</td><td> The construct id of the target</td></tr><tr><td> itemId </td><td>integer</td><td> The item id of the destroyed element</td></tr>",
            "Returns": ""
        },
        "onHit": {
            "Name": "onHit",
            "Description": "     Emitted when the weapon has hit",
            "Parameters": "<tr><td> targetId </td><td>integer</td><td> The construct id of the target</td></tr><tr><td> damage </td><td>number</td><td> The damage amount dealt by the hit</td></tr>",
            "Returns": ""
        },
        "getAmmo": {
            "Name": "getAmmo()",
            "Description": "     Returns the item id of the currently equipped ammo",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getAmmoCount": {
            "Name": "getAmmoCount()",
            "Description": "     Returns the current amount of remaining ammunition",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getMaxAmmo": {
            "Name": "getMaxAmmo()",
            "Description": "     Returns the maximum amount of ammunition the weapon can carry",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "isOutOfAmmo": {
            "Name": "isOutOfAmmo()",
            "Description": "     Checks if the weapon is out of ammo",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getOperationalState": {
            "Name": "getOperationalState()",
            "Description": "     Returns 1 if the weapon is not broken and compatible with the construct size",
            "Parameters": "",
            "Returns": "<tr><td> state</td><td>integer</td><td> 1 if the weapon is operational, otherwise 0 = broken, -1 = incompatible size</td></tr>"
        },
        "getStatus": {
            "Name": "getStatus()",
            "Description": "     Returns the current weapon status",
            "Parameters": "",
            "Returns": "<tr><td> status</td><td>integer</td><td> The current status of the weapon (Idle = 1, Firing = 2, Reloading = 3, Unloading = 4)</td></tr>"
        },
        "getContainerId": {
            "Name": "getContainerId()",
            "Description": "     Returns the local id of the container linked to the weapon",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        },
        "getHitProbability": {
            "Name": "getHitProbability()",
            "Description": "     Returns the current hit probability of the weapon for the current target",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getBaseDamage": {
            "Name": "getBaseDamage()",
            "Description": "     Returns the base weapon damage",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getOptimalAimingCone": {
            "Name": "getOptimalAimingCone()",
            "Description": "     Returns the optimal aim cone",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getOptimalDistance": {
            "Name": "getOptimalDistance()",
            "Description": "     Returns the optimal distance to target",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMaxDistance": {
            "Name": "getMaxDistance()",
            "Description": "     Returns the maximum distance to target",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getOptimalTracking": {
            "Name": "getOptimalTracking()",
            "Description": "     Returns the optimal tracking rate",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getMagazineVolume": {
            "Name": "getMagazineVolume()",
            "Description": "     Returns the magazine volume",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getCycleTime": {
            "Name": "getCycleTime()",
            "Description": "     Returns the weapon cycle time",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getReloadTime": {
            "Name": "getReloadTime()",
            "Description": "     Returns the weapon reload time",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getUnloadTime": {
            "Name": "getUnloadTime()",
            "Description": "     Returns the weapon unload time",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>number</td><td></td></tr>"
        },
        "getTargetId": {
            "Name": "getTargetId()",
            "Description": "     Returns the id of the current target construct of the weapon",
            "Parameters": "",
            "Returns": "<tr><td> </td><td>integer</td><td></td></tr>"
        }
    }
}